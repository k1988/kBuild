# $Id$
## @file
#
# kBuild - File included at top of makefile.
#
# Copyright (c) 2004 knut st. osmundsen <bird-srcspam@anduin.net>
#
#
# This file is part of kBuild.
#
# kBuild is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# kBuild is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with kBuild; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#
#

ifndef __footer_kmk__
# start-of-file-content

#
# Variables.
# (Some of these need initialization before including definitions using them.)
#

# all targets.
ALL_TARGETS := $(LIBRARIES) $(PROGRAMS) $(DLLS) $(DRIVERS) $(OTHERS)

# all of a type
_OBJS   :=
_LIBS   :=
_DLLS   :=
_EXES   :=
_DIRS   :=

# all objs of a specific target
define def_objs_var
_OBJS_$1 :=
endef
$(foreach target, $(ALL_TARGETS), $(eval _OBJS_$(target) := ))

# misc
type :=


#
# Basic macros
#

## Figure out the tool for a source
# @param    $1      source file
# @param    $2      normalized main target
_SOURCE_TOOL = $(firstword $($1_$2_TOOL) $($1_TOOL) $($2_TOOL) $(TOOL))

## Figure out where to put object files.
# @param    $1      source file
# @param    $2      normalized main target
_OBJECT_BASE = $(PATH_TARGET)/$(2)/$(basename $(1))

## Figure out where to put object files.
# @param    $1      real target name.
# @param    $2      normalized main target
_TARGET_BASE = $(PATH_TARGET)/$(2)/$(basename $(1))


#
# Include templates
#
_TEMPLATES := $(TEMPLATE)
define def_templates
ifdef $(target)_TEMPLATE
_TEMPLATES += $($(target)_TEMPLATE)
endif
endef
$(foreach target, $(ALL_TARGETS), $(eval $(def_templates)))
_TEMPLATES := $(sort $(_TEMPLATES))
# $ (warning dbg: _TEMPLATES=$(_TEMPLATES))

define def_templates_include
ifndef TEMPLATE_$(template)
include $(firstword $(wildcard $(PATH_KBUILD)/templates/$(template).kmk))
endif
endef
$(foreach template, $(_TEMPLATES), $(eval $(def_templates)))


#
# Common Inheritance
#

## Inherit defaults property
# @param    $(prop)     Property name
# @param    $(target)   Target name.
define def_inherit_defaults_one
ifndef $(target)_$(prop)
ifdef $(prop)
$(target)_$(prop) := $($(prop))
endif
endif
endef

## Inherit default properties for one target.
# A bit tricky this one, but it depends a bit on whether or not TEMPLATE
# is inherited from the default properties.
# @param    $(target)	Target name
define def_inherit_defaults
ifdef $(target)_TEMPLATE
ifndef TEMPLATE_$($(target)_TEMPLATE)_TOOL
$(foreach prop, TOOL, $(eval $(def_inherit_defaults_one)))
endif
ifndef TEMPLATE_$($(target)_TEMPLATE)_SDKS
$(foreach prop, SDKS, $(eval $(def_inherit_defaults_one)))
endif
else
$(foreach prop, TEMPLATE TOOL SDKS, $(eval $(def_inherit_defaults_one)))
endif
endef
# Inherit default properties.
$(foreach target, $(ALL_TARGETS), $(eval $(def_inherit_defaults)))


## Inherit one template property.		
# @param    $(prop)     Property name
# @param    $(target)	Target name
define def_inherit_template_one
ifndef $(target)_$(prop)
ifdef TEMPLATE_$($(target)_TEMPLATE)_$(prop)
$(target)_$(prop) := $(TEMPLATE_$($(target)_TEMPLATE)_$(prop))
endif
endif
endef

## Inherit template properties for on target.
# @param    $(target)    Target name.
define def_inherit_template
$(foreach prop,TOOL SDKS DEFS INCS COPTS CFLAGS CDEFS CINCS CXXOPTS CXXFLAGS CXXDEFS CXXINCS ASOPTS ASFLAGS ASDEFS ASINCS, \
	$(eval $(def_inherit_template_one)))
endef
# Inherit template properties
$(foreach target, $(ALL_TARGETS), $(eval $(def_inherit_template)))



#
# Include tools
# 			
_TOOLS := $(TOOL)
define def_tools_target_source
#$ (warning dbg: src=$(source))
$(foreach tool,$($(source)_TOOL) $($(target)_$(source)_TOOL),\
	$(eval _TOOLS += $(tool)))
endef
define def_tools_target
#$ (warning dbg: trg=$(target))
$(foreach tool, $($(target)_TOOL), $(eval _TOOLS += $(tool)))
$(foreach source, $($(target)_SOURCES), $(eval $(def_tools_target_source)))
endef
$(foreach target, $(ALL_TARGETS), $(eval $(def_tools_target)))
_TOOLS := $(sort $(_TOOLS))
#$ (warning dbg: _TOOLS=$(_TOOLS))

define def_tools_include
ifndef TOOL_$(tool)
include $(firstword $(wildcard $(PATH_KBUILD)/tools/$(tool).kmk))
endif
endef
$(foreach tool, $(_TOOLS), $(eval $(def_tools_include)))


#
# Include SDKs
#
_SDKS := $(SDKS)
define def_sdks_target_source
$(foreach sdk, $($(source)_SDKS) $($(target)_$(source)_SDKS), \
	$(eval _SDKS += $(sdk)))
endef
define def_sdks_target
$(foreach sdk, $($(target)_SDKS), $(eval _SDKS += $(sdk)))
$(foreach source, $($(target)_SOURCES), $(eval $(def_sdks_target_source)))
endef
$(foreach target, $(ALL_TARGETS), $(eval $(def_sdks_target)))
_SDKS := $(sort $(_SDKS))
#$ (warning dbg: _SDKS=$(_SDKS))

define def_sdks_include
ifndef SDK_$(sdk)
include $(firstword $(wildcard $(PATH_KBUILD)/sdks/$(sdk).kmk))
endif
endef
$(foreach sdk, $(_SDKS), $(eval $(def_sdk)))

#
# Object processing.
#

## Generic macro for processing C, C++ and Assembly sources.
# @param    $(target)     Normalized target name.
# @param    $(source)     Source file name.
# @param    $(type)       Source type. {C,CXX,AS}
#
# @remark   I've no clue why I've to $(eval ..) everything in this define. MAKE bug?
define def_target_source_c_cpp_asm
#$ (warning dbg: def_target_source_c_cpp_asm: source=$(source) target=$(target) type=$(type))

$(eval tool:=$(call _SOURCE_TOOL,$(source),$(target)))
$(eval defs        :=\
	$(TOOL_$(tool)_$(type)DEFS)\
	$(TOOL_$(tool)_$(type)DEFS.$(BUILD_TYPE))\
	$(DEFS)\
	$(DEFS.$(BUILD_TYPE))\
	$($(target)_DEFS)\
	$($(target)_DEFS.$(BUILD_TYPE))\
	$($(target)_DEFS.$(BUILD_TARGET))\
	$($(source)_DEFS)\
	$($(source)_DEFS.$(BUILD_TYPE))\
	$($(source)_DEFS.$(BUILD_TARGET))\
	$($(source)_$(type)DEFS)\
	$($(source)_$(type)DEFS.$(BUILD_TYPE))\
	$($(source)_$(type)DEFS.$(BUILD_TARGET))\
	$($(target)_$(type)DEFS)\
	$($(target)_$(type)DEFS.$(BUILD_TYPE))\
	$($(target)_$(type)DEFS.$(BUILD_TARGET))\
	$($(target)_$(source)_DEFS)\
	$($(target)_$(source)_DEFS.$(BUILD_TYPE))\
	$($(target)_$(source)_DEFS.$(BUILD_TARGET))\
	$($(target)_$(source)_$(type)DEFS)\
	$($(target)_$(source)_$(type)DEFS.$(BUILD_TYPE))\
	$($(target)_$(source)_$(type)DEFS.$(BUILD_TARGET))\
	)
$(eval incs        :=\
	$($(target)_$(source)_$(type)INCS.$(BUILD_TARGET))\
	$($(target)_$(source)_$(type)INCS.$(BUILD_TYPE))\
	$($(target)_$(source)_$(type)INCS)\
	$($(target)_$(source)_INCS.$(BUILD_TARGET))\
	$($(target)_$(source)_INCS.$(BUILD_TYPE))\
	$($(target)_$(source)_INCS)\
	$($(source)_$(type)INCS.$(BUILD_TARGET))\
	$($(source)_$(type)INCS.$(BUILD_TYPE))\
	$($(source)_$(type)INCS)\
	$($(source)_INCS.$(BUILD_TARGET))\
	$($(source)_INCS.$(BUILD_TYPE))\
	$($(source)_INCS)\
	$($(target)_$(type)INCS.$(BUILD_TARGET))\
	$($(target)_$(type)INCS.$(BUILD_TYPE))\
	$($(target)_$(type)INCS)\
	$($(target)_INCS.$(BUILD_TARGET))\
	$($(target)_INCS.$(BUILD_TYPE))\
	$($(target)_INCS)\
	$(INCS.$(BUILD_TARGET))\
	$(INCS.$(BUILD_TYPE))\
	$(INCS)\
	$(TOOL_$(tool)_$(type)INCS.$(BUILD_TARGET))\
	$(TOOL_$(tool)_$(type)INCS.$(BUILD_TYPE))\
	$(TOOL_$(tool)_$(type)INCS)\
	)
$(eval flags        :=\
	$(TOOL_$(tool)_$(type)FLAGS)\
	$(TOOL_$(tool)_$(type)FLAGS.$(BUILD_TYPE))\
	$(TOOL_$(tool)_$(type)FLAGS.$(BUILD_TARGET))\
	$($(type)FLAGS)\
	$($(type)FLAGS.$(BUILD_TYPE))\
	$($(type)FLAGS.$(BUILD_TARGET))\
	$($(target)_$(type)FLAGS)\
	$($(target)_$(type)FLAGS.$(BUILD_TYPE))\
	$($(target)_$(type)FLAGS.$(BUILD_TARGET))\
	$($(source)_$(type)FLAGS)\
	$($(source)_$(type)FLAGS.$(BUILD_TYPE))\
	$($(source)_$(type)FLAGS.$(BUILD_TARGET))\
	$($(target)_$(source)_$(type)FLAGS)\
	$($(target)_$(source)_$(type)FLAGS.$(BUILD_TYPE))\
	$($(target)_$(source)_$(type)FLAGS.$(BUILD_TARGET))\
	)
$(eval outbase     := $(call _OBJECT_BASE,$(source),$(target)))
$(eval dirdep      := $(dir $(outbase)).dir_created)
$(eval objsuff     := $(firstword \
	$($(target)_$(source)_OBJSUFF.$(BUILD_TARGET))\
	$($(target)_$(source)_OBJSUFF)\
	$($(source)_OBJSUFF.$(BUILD_TARGET))\
	$($(source)_OBJSUFF)\
	$($(target)_OBJSUFF.$(BUILD_TARGET))\
	$($(target)_OBJSUFF)\
	$(TOOL_$(tool)_$(type)OBJSUFF.$(BUILD_TARGET))\
	$(TOOL_$(tool)_$(type)OBJSUFF)\
	$(SUFF_OBJ)\
	))
$(eval obj         := $(outbase)$(objsuff))
$(eval dep         := $(outbase)$(SUFF_DEP))

#$ (warning dbg: target=$(target) source=$(source) tool=$(tool) obj=$(obj) dep=$(dep) flags=$(flags) defs=$(defs) incs=$(incs) dirdep=$(dirdep) outbase=$(outbase) objsuff=$(objsuff))
$(eval $(TOOL_$(tool)_COMPILE_$(type)))

$(eval _OBJS_$(target) += $(obj))
$(eval _DEPFILES       += $(dep))

endef

## Generic macro for processing all target sources.
# @param    $(target)   Normalized target name.
define def_target_sources
#$ (warning def_target_sources)
# C sources
$(foreach type,C,$(foreach source, $(filter %.c, $($(target)_SOURCES))\
	,$(eval $(def_target_source_c_cpp_asm)) ))

# C++ sources
$(foreach type,CXX,$(foreach source, $(filter %.cpp, $($(target)_SOURCES)) $(filter %.cxx, $($(target)_SOURCES)) $(filter %.cc, $($(target)_SOURCES))\
	,$(eval $(def_target_source_c_cpp_asm)) ))

# ASM sources
$(foreach type,AS,$(foreach source, $(filter %.asm, $($(target)_SOURCES)) $(filter %.s, $($(target)_SOURCES)) $(filter %.S, $($(target)_SOURCES))\
	,$(eval $(def_target_source_c_cpp_asm)) ))
endef


#
# LIBRARIES
#

## Library (one).
# @param    $(target)   Normalized library (target) name.
define def_lib
# source -> object
$(eval $(def_target_sources))

# library
$(eval tool        := $(firstword $($(target)_TOOL) $(TOOL)))
$(eval flags       :=\
	$(TOOL_$(tool)_ARFLAGS)\
	$(TOOL_$(tool)_ARFLAGS.$(BUILD_TYPE))\
	$(ARFLAGS)\
	$(ARFLAGS.$(BUILD_TYPE))\
	$($(target)_ARFLAGS)\
	$($(target)_ARFLAGS.$(BUILD_TYPE))\
	)
$(eval libsuff     := $(firstword\
	$($(target)_LIBSUFF.$(BUILD_TARGET))\
	$($(target)_LIBSUFF)\
	$(TOOL_$(tool)_ARLIBSUFF.$(BUILD_TARGET))\
	$(TOOL_$(tool)_ARLIBSUFF)\
	$(SUFF_LIB)\
))
## @todo prefix
$(eval outbase     := $(call _TARGET_BASE,$(target),$(target)))
$(eval lib         := $(outbase)$(libsuff))
$(eval objs         = $(_OBJS_$(target)))
$(eval dirdep      := $(dir $(lib)).dir_created)
## @todo fix dependencies
$(eval deps        := )

$(eval $(TOOL_$(tool)_LINK_LIBRARY))

_OBJS += $(_OBJS_$(target))
_LIBS += $(lib)
endef

# Process libraries
$(foreach target, $(LIBRARIES), $(eval $(def_lib)))



#
# PROGRAMS
#

## Program (one).
# @param    $(target)   Normalized target (program) name.
define def_program
# source -> object
$(eval $(def_target_sources))

# library
$(eval tool        := $(firstword $($(target)_TOOL) $(TOOL)))
$(eval flags       :=\
	$(TOOL_$(tool)_LDFLAGS)\
	$(TOOL_$(tool)_LDFLAGS.$(BUILD_TYPE))\
	$(LDFLAGS)\
	$(LDFLAGS.$(BUILD_TYPE))\
	$($(target)_LDFLAGS)\
	$($(target)_LDFLAGS.$(BUILD_TYPE))\
)
$(eval exesuff     := $(firstword $($(target)_EXESUFF) $($(target)_EXESUFF) $(TOOL_$(tool)_LDEXESUFF) $(SUFF_EXE)))
$(eval outbase     := $(call _TARGET_BASE,$(target),$(target)))
$(eval exe         := $(outbase)$(exesuff))
$(eval objs         = $(_OBJS_$(target)))
$(eval libs        :=\
	$($(target)_LIBS.$(BUILD_TYPE))\
	$($(target)_LIBS)\
	$(LIBS.$(BUILD_TYPE))\
	$(LIBS)\
	$(TOOL_$(tool)_LIBS.$(BUILD_TYPE))\
	$(TOOL_$(tool)_LIBS)\
)
$(eval libpath    :=\
	$($(target)_LIBPATH.$(BUILD_TYPE))\
	$($(target)_LIBPATH)\
	$(LIBPATH.$(BUILD_TYPE))\
	$(LIBPATH)\
	$(TOOL_$(tool)_LIBPATH.$(BUILD_TYPE))\
	$(TOOL_$(tool)_LIBPATH)\
)
$(eval dirdep      := $(dir $(exe)).dir_created)
## @todo fix dependencies
$(eval deps        := )
#
$(eval deffile    := $(strip $(firstword
	$($(target)_DEFFILE.$(BUILD_TARGET).$(BUILD_TYPE))\
	$($(target)_DEFFILE.$(BUILD_TARGET))\
	$($(target)_DEFFILE.$(BUILD_TYPE))\
	$($(target)_DEFFILE)\
	$(DEFFILE.$(BUILD_TARGET).$(BUILD_TYPE))\
	$(DEFFILE.$(BUILD_TARGET))\
	$(DEFFILE.$(BUILD_TYPE))\
	$(DEFFILE)\
)))
$(eval custom_pre    := $(strip $(firstword
	$($(target)_CUSTOM_PRE.$(BUILD_TARGET).$(BUILD_TYPE))\
	$($(target)_CUSTOM_PRE.$(BUILD_TARGET))\
	$($(target)_CUSTOM_PRE.$(BUILD_TYPE))\
	$($(target)_CUSTOM_PRE)\
	$(CUSTOM_PRE.$(BUILD_TARGET).$(BUILD_TYPE))\
	$(CUSTOM_PRE.$(BUILD_TARGET))\
	$(CUSTOM_PRE.$(BUILD_TYPE))\
	$(CUSTOM_PRE)\
)))
$(eval custom_post    := $(strip $(firstword
	$($(target)_CUSTOM_POST.$(BUILD_TARGET).$(BUILD_TYPE))\
	$($(target)_CUSTOM_POST.$(BUILD_TARGET))\
	$($(target)_CUSTOM_POST.$(BUILD_TYPE))\
	$($(target)_CUSTOM_POST)\
	$(CUSTOM_POST.$(BUILD_TARGET).$(BUILD_TYPE))\
	$(CUSTOM_POST.$(BUILD_TARGET))\
	$(CUSTOM_POST.$(BUILD_TYPE))\
	$(CUSTOM_POST)\
)))

$(eval $(TOOL_$(tool)_LINK_PROGRAM))

_OBJS += $(_OBJS_$(target))
_EXES += $(exe)
endef

# Process libraries
$(foreach target, $(PROGRAMS), $(eval $(def_program)))



#
# DLLS
#



#
# DRIVERS
#



#
# OTHERS
#



#
# DOCS
#


#
# Directories.
#
_DIRFILES := $(sort $(addsuffix /.dir_created,$(_DIRS)) $(addsuffix .dir_created,$(dir $(_OBJS) $(_LIBS) $(_EXES) $(_DLLS))))

define def_createdir
$(dirfile):
	$(call MSG_L1,Creating directory $$(@D))
	$(MKDIR) -p $$(@D)
	@echo dir_created > $$@
endef

$(foreach dirfile,$(_DIRFILES),$(eval $(def_createdir)))

#
# THE MAIN RULES
#
all_recursive:


objects: $(_OBJS)
	echo "dbg: _OBJS = $(_OBJS)"

libraries: $(_LIBS)
	echo "dbg: _LIBS = $(_LIBS)"

programs: $(_EXES)
	echo "dbg: _EXES = $(_EXES)"


# end-of-file-content
__footer_kmk__ := 1
endif # __footer_kmk__
