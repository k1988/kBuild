# $Id$
## @file
#
# kBuild Tool Config - Visual C++ 7.0 (aka Visual .NET)
#
# Copyright (c) 2004-2005 knut st. osmundsen <bird-srcspam@anduin.net>
#
#
# This file is part of kBuild.
#
# kBuild is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# kBuild is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with kBuild; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#
#


TOOL_VCC70                    := Visual C++ 7.0
PATH_TOOL_VCC70               ?= $(PATH_DEV)/x86.win32/vcc70
PATH_TOOL_VCC70_LIB           ?= $(PATH_DEV)/x86.win32/vcc70/lib

TOOL_VCC70_CC                 := $(EXEC_X86_WIN32) $(PATH_TOOL_VCC70)/bin/cl.exe
TOOL_VCC70_COBJSUFF           := .obj
TOOL_VCC70_CFLAGS             := -TC -c -nologo
TOOL_VCC70_CFLAGS.debug       := -Od -Zi
TOOL_VCC70_CFLAGS.release     := -O2
TOOL_VCC70_CFLAGS.profile     := -O2
TOOL_VCC70_CINCS              := $(PATH_TOOL_VCC70)/include
TOOL_VCC70_CDEFS              :=

TOOL_VCC70_CXX                := $(EXEC_X86_WIN32) $(PATH_TOOL_VCC70)/bin/cl.exe
TOOL_VCC70_CXXOBJSUFF         := .obj
TOOL_VCC70_CXXFLAGS           := -TP -c -nologo
TOOL_VCC70_CXXFLAGS.debug     := -Od -Zi
TOOL_VCC70_CXXFLAGS.release   := -O2
TOOL_VCC70_CXXFLAGS.profile   := -O2
TOOL_VCC70_CXXINCS            := $(PATH_TOOL_VCC70)/include
TOOL_VCC70_CXXDEFS            :=

TOOL_VCC70_AS                 := $(EXEC_X86_WIN32) $(PATH_TOOL_VCC70)/bin/ml.exe
TOOL_VCC70_ASOBJSUFF          := .obj

TOOL_VCC70_AR                 := $(EXEC_X86_WIN32) $(PATH_TOOL_VCC70)/bin/lib.exe
TOOL_VCC70_ARFLAGS            := -nologo
TOOL_VCC70_ARLIBSUFF          := .lib

TOOL_VCC70_LD                 := $(EXEC_X86_WIN32) $(PATH_TOOL_VCC70)/bin/link.exe
TOOL_VCC70_LDFLAGS            := -nologo
TOOL_VCC70_LDFLAGS.debug      := -debug
TOOL_VCC70_LDFLAGS.release    :=

## Constructs the correct .pdb name (the name is lowercased).
# @param    $(1)        Base name, no extention.
ifeq ($(filter tolower,$(KMK_FEATURES)),tolower)
TOOL_VCC70_PDB                = $(dir $(1))$(tolower $(notdir $(1))).pdb
else # this fallback is incorrect and won't work on a case sensitive FS.
TOOL_VCC70_PDB                = $(1).pdb
endif


## Compile C source.
# @param    $(target)   Normalized main target name.
# @param    $(source)   Source filename (relative).
# @param    $(obj)      Object file name. This shall be (re)created by the compilation.
# @param    $(dep)      Dependcy file. This shall be (re)created by the compilation.
# @param    $(flags)    Flags.
# @param    $(defs)     Definitions. No -D or something.
# @param    $(incs)     Includes. No -I or something.
# @param    $(dirdep)   Directory creation dependency.
# @param    $(deps)     Other dependencies.
#
# @param    $(outbase)  Output basename (full). Use this for list files and such.
# @param    $(objsuff)  Object suffix.
define TOOL_VCC70_COMPILE_C
#$ (warning dbg: TOOL_VCC70_COMPILE_C: target=$(target) source=$(source) obj=$(obj) dep=$(dep) flags=$(flags) defs=$(defs) incs=$(incs) dirdep=$(dirdep) outbase=$(outbase) objsuff=$(objsuff))
$(obj) $(call TOOL_VCC70_PDB, $(outbase)-obj): $(deps) $(source) | $(dirdep)
	$(call MSG_L2,Compiling $$@ using VCC70)
	$(TOOL_VCC70_CC) -c\
		$(flags) $(addprefix -I, $(incs)) $(addprefix -D, $(defs))\
		-Fd$(outbase)-obj.pdb \
		-Fo$(obj)\
		$(subst /,\\,$(call ABSPATH,$(source)))
	$(TOOL_VCC70_CC) -E\
		$(flags) $(addprefix -I, $(incs)) $(addprefix -D, $(defs))\
		$(subst /,\\,$(call ABSPATH,$(source)))\
		| $(DEP_PRE) -f -s -o $(dep) -t $(obj) -
_OUT_FILES += $(call TOOL_VCC70_PDB, $(outbase)-obj)

endef


## Compile C++ source.
# @param    $(target)   Normalized main target name.
# @param    $(source)   Source filename (relative).
# @param    $(obj)      Object file name. This shall be (re)created by the compilation.
# @param    $(dep)      Dependcy file. This shall be (re)created by the compilation.
# @param    $(flags)    Flags.
# @param    $(defs)     Definitions. No -D or something.
# @param    $(incs)     Includes. No -I or something.
# @param    $(dirdep)   Directory creation dependency.
# @param    $(deps)     Other dependencies.
#
# @param    $(outbase)  Output basename (full). Use this for list files and such.
# @param    $(objsuff)  Object suffix.
define TOOL_VCC70_COMPILE_CXX
#$ (warning dbg: TOOL_VCC70_COMPILE_CXX: target=$(target) source=$(source) obj=$(obj) dep=$(dep) flags=$(flags) defs=$(defs) incs=$(incs) dirdep=$(dirdep) outbase=$(outbase) objsuff=$(objsuff))
$(obj) $(call TOOL_VCC70_PDB, $(outbase)-obj): $(deps) $(source) | $(dirdep)
	$(call MSG_L2,Compiling $$@ using VCC70)
	$(TOOL_VCC70_CXX) -c\
		$(flags) $(addprefix -I, $(incs)) $(addprefix -D, $(defs))\
		-Fd$(outbase)-obj.pdb \
		-Fo$(obj)\
		$(subst /,\\,$(call ABSPATH,$(source)))
	$(TOOL_VCC70_CXX) -E\
		$(flags) $(addprefix -I, $(incs)) $(addprefix -D, $(defs))\
		$(subst /,\\,$(call ABSPATH,$(source)))\
		| $(DEP_PRE) -f -s -o $(dep) -t $(obj) -
_OUT_FILES += $(call TOOL_VCC70_PDB, $(outbase)-obj)

endef


## Link library
# @param    $(target)   Normalized main target name.
# @param    $(lib)		Library name.
# @param    $(objs)     Object files to put in the library.
# @param    $(flags)    Flags.
# @param    $(dirdep)   Directory creation dependency.
# @param    $(deps)		Other dependencies.
# @param    $(othersrc) Unhandled sources.
#
# @param    $(outbase)  Output basename (full). Use this for list files and such.
define TOOL_VCC70_LINK_LIBRARY
#$ (warning dbg: TOOL_VCC70_LINK_LIBRARY: target=$(target) lib=$(lib) objs=$(objs) deps=$(deps) flags=$(flags) dirdep=$(dirdep) outbase=$(outbase))
$(lib) $(outbase).lst $(outbase).exp $(call TOOL_VCC70_PDB, $(outbase)): $(deps) $(objs) $(othersrc) | $(dirdep)
	$(call MSG_L1,Creating Library $$@)
	$(RM) -f $$@
	$(TOOL_VCC70_AR) $(flags) /OUT:$(lib) $(subst /,\\,$(objs) $(filter %.a %.lib,$(othersrc))) \
		$(foreach def,$(filter %.def,$(othersrc)), /DEF:$(def))
_OUT_FILES += $(outbase).lst $(outbase).exp $(call TOOL_VCC70_PDB, $(outbase))

endef


## Link program
# @param    $(target)       Normalized main target name.
# @param    $(out)          Program name.
# @param    $(objs)         Object files to link together.
# @param    $(libs)         Libraries to search.
# @param    $(libpath)      Library search paths.
# @param    $(flags)        Flags.
# @param    $(dirdep)       Directory creation dependency.
# @param    $(deps)         Other dependencies.
# @param    $(othersrc)     Unhandled sources.
# @param    $(custom_pre)   Custom step invoked before linking.
# @param    $(custom_post)  Custom step invoked after linking.
#
# @param    $(outbase)  Output basename (full). Use this for list files and such.
define TOOL_VCC70_LINK_PROGRAM
#$ (warning dbg: TOOL_VCC70_LINK_PROGRAM: target=$(target) out=$(out) objs=$(objs) libs=$(libs) deps=$(deps) flags=$(flags) dirdep=$(dirdep) othersrc=$(othersrc) outbase=$(outbase))
$(out) $(outbase).map $(outbase).lib $(outbase).exp $(call TOOL_VCC70_PDB, $(outbase)) $(outbase).ilk: \
		$(deps) $(objs) $(foreach lib,$(libs),$(if $(findstring $(lib),$(subst /,x,$(lib))),, $(lib))) $(othersrc) | $(dirdep)
	$(call MSG_L1,Creating Program $$@)
ifneq ($(custom_pre),)
	$(eval $(custom_pre))
endif
	$(TOOL_VCC70_LD) $(flags) \
		/OUT:$(out) \
		/MAPINFO:EXPORTS /MAPINFO:LINES \
		/MAP:$(outbase).map \
		$(foreach def,$(filter %.def,$(othersrc)), /DEF:$(def)) \
		$(subst /,\\,$(filter %.exp %.res,$(othersrc))) \
		$(foreach p,$(libpath), /LIBPATH:$(p)) \
		$(subst /,\\,$(objs)) \
		$(subst /,\\,$(libs))
ifneq ($(custom_post),)
	$(eval $(custom_post))
endif
_OUT_FILES += $(outbase).map $(outbase).lib $(outbase).exp $(call TOOL_VCC70_PDB, $(outbase)) $(outbase).ilk

endef


## Link system module (windows aka driver, linux aka kernel module)
# @param    $(target)       Normalized main target name.
# @param    $(out)          System module name.
# @param    $(objs)         Object files to link together.
# @param    $(libs)         Libraries to search.
# @param    $(libpath)      Library search paths.
# @param    $(flags)        Flags.
# @param    $(dirdep)       Directory creation dependency.
# @param    $(deps)         Other dependencies.
# @param    $(othersrc)     Unhandled sources.
# @param    $(custom_pre)   Custom step invoked before linking.
# @param    $(custom_post)  Custom step invoked after linking.
#
# @param    $(outbase)  Output basename (full). Use this for list files and such.
define TOOL_VCC70_LINK_SYSMOD
#$ (warning dbg: TOOL_VCC70_LINK_SYSMOD: target=$(target) out=$(out) objs=$(objs) libs=$(libs) deps=$(deps) flags=$(flags) dirdep=$(dirdep) othersrc=$(othersrc) outbase=$(outbase))
$(out) $(outbase).map $(outbase).lib $(outbase).exp $(call TOOL_VCC70_PDB, $(outbase)) $(outbase).ilk: \
		$(deps) $(objs) $(foreach lib,$(libs),$(if $(findstring $(lib),$(subst /,x,$(lib))),, $(lib))) $(othersrc) | $(dirdep)
	$(call MSG_L1,Creating Program $$@)
ifneq ($(custom_pre),)
	$(eval $(custom_pre))
endif
	$(TOOL_VCC70_LD) $(flags) \
		/OUT:$(out) \
		/MAPINFO:EXPORTS /MAPINFO:LINES \
		/MAP:$(outbase).map \
		$(foreach def,$(filter %.def,$(othersrc)), /DEF:$(def)) \
		$(subst /,\\,$(filter %.exp %.res,$(othersrc))) \
		$(foreach p,$(libpath), /LIBPATH:$(p)) \
		$(subst /,\\,$(objs)) \
		$(subst /,\\,$(libs))
ifneq ($(custom_post),)
	$(eval $(custom_post))
endif
_OUT_FILES += $(outbase).map $(outbase).lib $(outbase).exp $(call TOOL_VCC70_PDB, $(outbase)) $(outbase).ilk

endef


## Link DLL.
# @param    $(target)   Normalized main target name.
# @param    $(out)      DLL name.
# @param    $(objs)     Object files to link together.
# @param    $(libs)     Libraries to search.
# @param    $(libpath)  Library search paths.
# @param    $(flags)    Flags.
# @param    $(dirdep)   Directory creation dependency.
# @param    $(deps)     Other dependencies.
# @param    $(othersrc)     Unhandled sources.
# @param    $(custom_pre)   Custom step invoked before linking.
# @param    $(custom_post)  Custom step invoked after linking.
#
# @param    $(outbase)  Output basename (full). Use this for list files and such.
define TOOL_VCC70_LINK_DLL
#$ (warning dbg: TOOL_VCC70_LINK_DLL: target=$(target) out=$(out) objs=$(objs) libs=$(libs) deps=$(deps) flags=$(flags) dirdep=$(dirdep) othersrc=$(othersrc) outbase=$(outbase))
$(out) $(outbase).map $(outbase).lib $(outbase).exp $(call TOOL_VCC70_PDB, $(outbase)) $(outbase).ilk: \
		$(deps) $(call DIRDEP,$(PATH_LIB)) $(objs) $(foreach lib,$(libs),$(if $(findstring $(lib),$(subst /,x,$(lib))),, $(lib))) $(othersrc) | $(dirdep)
	$(call MSG_L1,Creating Program $$@)
ifneq ($(custom_pre),)
	$(eval $(custom_pre))
endif
	$(TOOL_VCC70_LD) $(flags) \
		/OUT:$(out) \
		/IMPLIB:$(outbase).lib \
		/MAPINFO:EXPORTS /MAPINFO:LINES \
		/MAP:$(outbase).map \
		/DLL \
		$(foreach def,$(filter %.def,$(othersrc)), /DEF:$(def)) \
		$(subst /,\\,$(filter %.exp %.res,$(othersrc))) \
		$(foreach p,$(libpath), /LIBPATH:$(p)) \
		$(subst /,\\,$(objs)) \
		$(subst /,\\,$(libs))
ifeq ($(filter %.exp .def,$(othersrc)),)
	if test -f $(outbase).exp; then $(CP_EXT) $(outbase).exp $(PATH_LIB)/; fi
	if test -f $(outbase).lib; then $(CP_EXT) $(outbase).lib $(PATH_LIB)/; fi
endif
ifneq ($(custom_post),)
	$(eval $(custom_post))
endif
_OUT_FILES += $(outbase).map $(outbase).lib $(outbase).exp $(call TOOL_VCC70_PDB, $(outbase)) $(outbase).ilk
_DIRS += $(PATH_LIB)

endef

