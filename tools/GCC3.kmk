# $Id$
## @file
#
# kBuild Tool Config - Generic GCC.
#
# Copyright (c) 2004 knut st. osmundsen <bird-srcspam@anduin.net>
#
#
# This file is part of kBuild.
#
# kBuild is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# kBuild is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with kBuild; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#
#

TOOL_GCC3                    := Generic GCC v3

TOOL_GCC3_CC                 := gcc$(HOSTSUFF_EXE)
TOOL_GCC3_COBJSUFF           := .o
TOOL_GCC3_CFLAGS             := -g
TOOL_GCC3_CFLAGS.debug       := -O0
TOOL_GCC3_CFLAGS.release     := -O2
TOOL_GCC3_CFLAGS.profile     := -O2 #-pg
TOOL_GCC3_CINCS              :=
TOOL_GCC3_CDEFS              :=

TOOL_GCC3_CXX                := g++$(HOSTSUFF_EXE)
TOOL_GCC3_CXXOBJSUFF         := .o
TOOL_GCC3_CXXOBJSUFF         := .o
TOOL_GCC3_CXXFLAGS           := -g
TOOL_GCC3_CXXFLAGS.debug     := -O0
TOOL_GCC3_CXXFLAGS.release   := -O2
TOOL_GCC3_CXXFLAGS.profile   := -O2 #-pg
TOOL_GCC3_CXXINCS            :=
TOOL_GCC3_CXXDEFS            :=

TOOL_GCC3_AS                 := as$(HOSTSUFF_EXE)
TOOL_GCC3_ASOBJSUFF          := .o

TOOL_GCC3_AR                 := ar$(HOSTSUFF_EXE)
TOOL_GCC3_ARFLAGS            := cr
TOOL_GCC3_ARLIBSUFF          := .a

TOOL_GCC3_LD                 := g++$(HOSTSUFF_EXE)
TOOL_GCC3_LD_SYSMOD          := ld$(HOSTSUFF_EXE)
TOOL_GCC3_LDFLAGS            :=
TOOL_GCC3_LDFLAGS.debug      := -g
TOOL_GCC3_LDFLAGS.release    := -s
ifndef TOOL_GCC3_LDFLAGS.$(BUILD_TARGET)
TOOL_GCC3_LDFLAGS.dll        := -shared
else
TOOL_GCC3_LDFLAGS.dll        := $(TOOL_GCC3_LDFLAGS.$(BUILD_TARGET))
endif
TOOL_GCC3_LDFLAGS.sysmod     := -r
TOOL_GCC3_LD_SONAME           = -Wl,-soname=$(firstword $($(1)_SONAME.$(BUILD_TARGET).$(BUILD_TYPE)) $($(1)_SONAME.$(BUILD_TARGET)) $($(1)_SONAME.$(BUILD_TYPE)) $($(1)_SONAME) $(notdir $(2)))

ifdef SLKRUNS
TOOL_GCC3_CC  += -fmessage-length=0
TOOL_GCC3_CXX += -fmessage-length=0
endif


## Compile C source.
# @param    $(target)   Normalized main target name.
# @param    $(source)   Source filename (relative).
# @param	$(obj)      Object file name. This shall be (re)created by the compilation.
# @param    $(dep)	    Dependcy file. This shall be (re)created by the compilation.
# @param    $(flags)    Flags.
# @param    $(defs)     Definitions. No -D or something.
# @param    $(incs)     Includes. No -I or something.
# @param	$(dirdep)   Directory creation dependency.
# @param	$(deps)		Other dependencies.
#
# @param    $(outbase)  Output basename (full). Use this for list files and such.
# @param	$(objsuff)  Object suffix.
define TOOL_GCC3_COMPILE_C
#$ (warning dbg: TOOL_GCC3_COMPILE_C: target=$(target) source=$(source) obj=$(obj) dep=$(dep) flags=$(flags) defs=$(defs) incs=$(incs) dirdep=$(dirdep) outbase=$(outbase) objsuff=$(objsuff))
$(obj): $(dirdep) $(source) $(deps)
	$(call MSG_L2,Compiling $$@ using GCC3)
	$(TOOL_GCC3_CC) -c\
		$(flags) $(addprefix -I, $(incs)) $(addprefix -D, $(defs))\
		-Wp,-MD,$(dep) -Wp,-MT,$$@ \
		-o $$@\
		$(call ABSPATH,$(source))

endef


## Compile C++ source.
# @param    $(target)   Normalized main target name.
# @param    $(source)   Source filename (relative).
# @param	$(obj)      Object file name. This shall be (re)created by the compilation.
# @param    $(dep)	    Dependcy file. This shall be (re)created by the compilation.
# @param    $(flags)    Flags.
# @param    $(defs)     Definitions. No -D or something.
# @param    $(incs)     Includes. No -I or something.
# @param	$(dirdep)   Directory creation dependency.
# @param	$(deps)		Other dependencies.
#
# @param    $(outbase)  Output basename (full). Use this for list files and such.
# @param	$(objsuff)  Object suffix.
define TOOL_GCC3_COMPILE_CXX
#$ (warning dbg: TOOL_GCC3_COMPILE_CXX: target=$(target) source=$(source) obj=$(obj) dep=$(dep) flags=$(flags) defs=$(defs) incs=$(incs) dirdep=$(dirdep) outbase=$(outbase) objsuff=$(objsuff))
$(obj): $(dirdep) $(source) $(deps)
	$(call MSG_L2,Compiling $$@ using GCC3)
	$(TOOL_GCC3_CXX) -c\
		$(flags) $(addprefix -I, $(incs)) $(addprefix -D, $(defs))\
		-Wp,-MD,$(dep) -Wp,-MT,$$@ \
		-o $$@\
		$(call ABSPATH,$(source))

endef


## Link library
# @param    $(target)   Normalized main target name.
# @param    $(lib)		Library name.
# @param    $(objs)     Object files to put in the library.
# @param    $(flags)    Flags.
# @param	$(dirdep)   Directory creation dependency.
# @param	$(deps)		Other dependencies.
# @param	$(othersrc) Unhandled sources.
#
# @param    $(outbase)  Output basename (full). Use this for list files and such.

define TOOL_GCC3_LINK_LIBRARY_ADDMOD

	echo "ADDMOD $(o)" >> $$@.ar-script
endef

define TOOL_GCC3_LINK_LIBRARY_EXPAND_LIB

	$(MKDIR) -p $(dir $(outbase))ar.extract/$(notdir $(srclib))
	cd $(dir $(outbase))ar.extract/$(notdir $(srclib)) && $(TOOL_GCC3_AR) x $(srclib)
	for o in `$(TOOL_GCC3_AR) t $(srclib)`; do echo "ADDMOD $(dir $(outbase))ar.extract/$(notdir $(srclib))/$$$${o}" >> $$@.ar-script; done
endef

define TOOL_GCC3_LINK_LIBRARY
#$ (warning dbg: TOOL_GCC3_LINK_LIBRARY: target=$(target) lib=$(lib) objs=$(objs) deps=$(deps) flags=$(flags) dirdep=$(dirdep) othersrc=$(othersrc) outbase=$(outbase))
$(lib): $(dirdep) $(objs) $(deps) $(filter %.a %.lib,$(othersrc))
	$(call MSG_L1,Creating Library $$@)
	$(RM) -f $$@
ifneq ($(strip $(filter %.a %.lib,$(othersrc))),)
	echo "CREATE $$@" > $$@.ar-script
	$(foreach o, $(objs),$(TOOL_GCC3_LINK_LIBRARY_ADDMOD))
	$(foreach srclib, $(filter %.a %.lib,$(othersrc)),$(TOOL_GCC3_LINK_LIBRARY_EXPAND_LIB))
	echo "SAVE" >> $$@.ar-script
	echo "END" >> $$@.ar-script
	$(TOOL_GCC3_AR) -M < $$@.ar-script
	$(RM) -Rf "$(dir $(outbase))ar.extract/"
else
	$(TOOL_GCC3_AR) $(flags) $$@ $(objs)
endif

endef


## Link program
# @param    $(target)   Normalized main target name.
# @param    $(exe)		Program name.
# @param    $(objs)     Object files to link together.
# @param    $(libs)     Libraries to search.
# @param    $(libpath)  Library search paths.
# @param    $(flags)    Flags.
# @param	$(dirdep)   Directory creation dependency.
# @param	$(deps)		Other dependencies.
# @param	$(othersrc) Unhandled sources.
# @param	$(custom_pre)   Custom step invoked before linking.
# @param	$(custom_post)  Custom step invoked after linking.
#
# @param    $(outbase)  Output basename (full). Use this for list files and such.
define TOOL_GCC3_LINK_PROGRAM
#$ (warning dbg: TOOL_GCC3_LINK_PROGRAM: target=$(target) exe=$(exe) objs=$(objs) libs=$(libs) deps=$(deps) flags=$(flags) dirdep=$(dirdep) deffile=$(deffile) outbase=$(outbase))
$(exe): $(dirdep) $(objs) $(foreach lib,$(libs),$(if $(findstring $(lib),$(subst /,x,$(lib))),, $(lib))) $(deps)
	$(call MSG_L1,Creating Program $$@)
ifneq ($(custom_pre),)
	$(eval $(custom_pre))
endif
	$(TOOL_GCC3_LD) $(flags) -o $$@ $(objs) \
	$(foreach p,$(libpath), -L$(p)) \
	$(foreach lib,$(libs), $(if $(findstring $(lib),$(subst /,x,$(lib))), -l$(patsubst lib%,%,$(basename $(lib))), $(lib)))
ifneq ($(custom_post),)
	$(eval $(custom_post))
endif

endef


## Link DLL
# @param    $(target)   Normalized main target name.
# @param    $(dll)		Program name.
# @param    $(objs)     Object files to link together.
# @param    $(libs)     Libraries to search.
# @param    $(libpath)  Library search paths.
# @param    $(flags)    Flags.
# @param	$(dirdep)   Directory creation dependency.
# @param	$(deps)		Other dependencies.
# @param	$(othersrc) Unhandled sources.
# @param	$(custom_pre)   Custom step invoked before linking.
# @param	$(custom_post)  Custom step invoked after linking.
#
# @param    $(outbase)  Output basename (full). Use this for list files and such.
define TOOL_GCC3_LINK_DLL
#$ (warning dbg: TOOL_GCC3_LINK_PROGRAM: target=$(target) dll=$(dll) objs=$(objs) libs=$(libs) deps=$(deps) flags=$(flags) dirdep=$(dirdep) deffile=$(deffile) outbase=$(outbase))
$(dll): $(dirdep) $(objs) $(foreach lib,$(libs),$(if $(findstring $(lib),$(subst /,x,$(lib))),, $(lib))) $(deps)
	$(call MSG_L1,Creating Program $$@)
ifneq ($(custom_pre),)
	$(eval $(custom_pre))
endif
	$(TOOL_GCC3_LD) $(TOOL_GCC3_LDFLAGS.dll) $(flags) -o $$@ \
	$(if $(filter linux, $(BUILD_TARGET)),$(call TOOL_GCC3_LD_SONAME,$(target),$(dll))) \
	$(objs) \
	$(foreach p,$(libpath), -L$(p)) \
	$(foreach lib,$(libs), $(if $(findstring $(lib),$(subst /,x,$(lib))), -l$(patsubst lib%,%,$(basename $(lib))), $(lib)))
ifneq ($(custom_post),)
	$(eval $(custom_post))
endif

endef

## Link system module (windows aka driver, linux aka kernel module)
# @param    $(target)   Normalized main target name.
# @param    $(sys)		System module name.
# @param    $(objs)     Object files to link together.
# @param    $(libs)     Libraries to search.
# @param    $(libpath)  Library search paths.
# @param    $(flags)    Flags.
# @param	$(dirdep)   Directory creation dependency.
# @param	$(deps)		Other dependencies.
# @param	$(othersrc) Unhandled sources.
# @param	$(custom_pre)   Custom step invoked before linking.
# @param	$(custom_post)  Custom step invoked after linking.
#
# @param    $(outbase)  Output basename (full). Use this for list files and such.
define TOOL_GCC3_LINK_SYSMOD
#$ (warning dbg: TOOL_GCC3_LINK_SYSMOD: target=$(target) sys=$(sys) objs=$(objs) libs=$(libs) deps=$(deps) flags=$(flags) dirdep=$(dirdep) othersrc=$(othersrc) outbase=$(outbase))
$(sys): $(dirdep) $(objs) $(foreach lib,$(libs),$(if $(findstring $(lib),$(subst /,x,$(lib))),, $(lib))) $(deps)
	$(call MSG_L1,Creating Program $$@)
ifneq ($(custom_pre),)
	$(eval $(custom_pre))
endif
	$(TOOL_GCC3_LD_SYSMOD) $(TOOL_GCC3_LDFLAGS.sysmod) $(flags) -o $$@ $(objs) \
		$(foreach p,$(libpath), -L$(p)) \
		$(foreach lib,$(libs), $(if $(findstring $(lib),$(subst /,x,$(lib))), -l$(patsubst lib%,%,$(basename $(lib))), $(lib)))
ifneq ($(custom_post),)
	$(eval $(custom_post))
endif

endef

