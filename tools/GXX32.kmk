# $Id$
## @file
#
# kBuild Tool Config - Generic 32-bit GCC v3.2.x or later using the system GCC, for building C++ code.
#
# Copyright (c) 2004-2007 knut st. osmundsen <bird-kBuild-spam@anduin.net>
#
#
# This file is part of kBuild.
#
# kBuild is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# kBuild is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with kBuild; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#
#

TOOL_GXX32 := Generic 32-bit GCC v3.2.x or later using the system GCC, for building C++ code. \
	More or less Linux/ELF specfic.

# Tool Specific Properties
TOOL_GXX32_CC  ?= gcc$(HOSTSUFF_EXE) -m32
TOOL_GXX32_CXX ?= g++$(HOSTSUFF_EXE) -m32
TOOL_GXX32_AS  ?= gcc$(HOSTSUFF_EXE) -m32
TOOL_GXX32_AR  ?= ar$(HOSTSUFF_EXE)
TOOL_GXX32_LD  ?= g++$(HOSTSUFF_EXE) -m32
TOOL_GXX32_LD_SYSMOD ?= ld$(HOSTSUFF_EXE)
ifndef TOOL_GXX32_LDFLAGS.$(BUILD_TARGET)
TOOL_GXX32_LDFLAGS.dll ?= -shared
else
TOOL_GXX32_LDFLAGS.dll ?= $(TOOL_GXX32_LDFLAGS.$(BUILD_TARGET))
endif
TOOL_GXX32_LDFLAGS.sysmod ?= -r -m elf_i386
TOOL_GXX32_LD_SONAME ?= -Wl,-soname=$(firstword $($(1)_SONAME.$(BUILD_TARGET).$(BUILD_TYPE)) $($(1)_SONAME.$(BUILD_TARGET)) $($(1)_SONAME.$(BUILD_TYPE)) $($(1)_SONAME) $(notdir $(2)))
ifeq ($(BUILD_TARGET),os2)
TOOL_GXX32_LD_MAP ?= -Zmap=$(1)
else
TOOL_GXX32_LD_MAP ?= -Wl,-Map -Wl,$(1) -Wl,--cref
endif
ifeq ($(BUILD_TARGET),os2)
TOOL_GXX32_LD_SYSMOD_MAP ?= -Zmap=$(1)
else
TOOL_GXX32_LD_SYSMOD_MAP ?= -Map $(1) --cref
endif
ifdef SLKRUNS
TOOL_GXX32_CC  += -fmessage-length=0
TOOL_GXX32_CXX += -fmessage-length=0
endif

# General Properties used by kBuild
TOOL_GXX32_COBJSUFF         ?= .o
TOOL_GXX32_CFLAGS           ?=
TOOL_GXX32_CFLAGS.debug     ?= -g
TOOL_GXX32_CFLAGS.profile   ?= -g -O2 #-pg
TOOL_GXX32_CFLAGS.release   ?= -O2
TOOL_GXX32_CINCS            ?=
TOOL_GXX32_CDEFS            ?=

TOOL_GXX32_CXXOBJSUFF       ?= .o
TOOL_GXX32_CXXOBJSUFF       ?= .o
TOOL_GXX32_CXXFLAGS         ?=
TOOL_GXX32_CXXFLAGS.debug   ?= -g
TOOL_GXX32_CXXFLAGS.profile ?= -g -O2 #-pg
TOOL_GXX32_CXXFLAGS.release ?= -O2
TOOL_GXX32_CXXINCS          ?=
TOOL_GXX32_CXXDEFS          ?=

TOOL_GXX32_ASFLAGS          ?= -x assembler-with-cpp
TOOL_GXX32_ASFLAGS.debug    ?= -g
TOOL_GXX32_ASFLAGS.profile  ?= -g
TOOL_GXX32_ASOBJSUFF        ?= .o

TOOL_GXX32_ARFLAGS          ?= cr
TOOL_GXX32_ARLIBSUFF        ?= .a

TOOL_GXX32_LDFLAGS          ?=
TOOL_GXX32_LDFLAGS.debug    ?= -g
TOOL_GXX32_LDFLAGS.profile  ?= -g


## Compile C source.
# @param    $(target)   Normalized main target name.
# @param    $(source)   Source filename (relative).
# @param    $(obj)      Object file name. This shall be (re)created by the compilation.
# @param    $(dep)	    Dependcy file. This shall be (re)created by the compilation.
# @param    $(flags)    Flags.
# @param    $(defs)     Definitions. No -D or something.
# @param    $(incs)     Includes. No -I or something.
# @param    $(dirdep)   Directory creation dependency.
# @param    $(deps)		Other dependencies.
#
# @param    $(outbase)  Output basename (full). Use this for list files and such.
# @param    $(objsuff)  Object suffix.
TOOL_GXX32_COMPILE_C_OUTPUT =
TOOL_GXX32_COMPILE_C_DEPEND =
TOOL_GXX32_COMPILE_C_DEPORD =
define TOOL_GXX32_COMPILE_C_CMDS
	$(QUIET)$(TOOL_GXX32_CC) -c\
		$(flags) $(addprefix -I, $(incs)) $(addprefix -D, $(defs))\
		-Wp,-MD,$(dep) -Wp,-MT,$(obj) -Wp,-MP\
		-o $(obj)\
		$(abspath $(source))
endef


## Compile C++ source.
# @param    $(target)   Normalized main target name.
# @param    $(source)   Source filename (relative).
# @param    $(obj)      Object file name. This shall be (re)created by the compilation.
# @param    $(dep)	    Dependcy file. This shall be (re)created by the compilation.
# @param    $(flags)    Flags.
# @param    $(defs)     Definitions. No -D or something.
# @param    $(incs)     Includes. No -I or something.
# @param    $(dirdep)   Directory creation dependency.
# @param    $(deps)		Other dependencies.
# @param    $(outbase)  Output basename (full). Use this for list files and such.
# @param    $(objsuff)  Object suffix.
TOOL_GXX32_COMPILE_CXX_OUTPUT =
TOOL_GXX32_COMPILE_CXX_DEPEND =
TOOL_GXX32_COMPILE_CXX_DEPORD =
define TOOL_GXX32_COMPILE_CXX_CMDS
	$(QUIET)$(TOOL_GXX32_CXX) -c\
		$(flags) $(addprefix -I, $(incs)) $(addprefix -D, $(defs))\
		-Wp,-MD,$(dep) -Wp,-MT,$(obj) -Wp,-MP\
		-o $(obj)\
		$(abspath $(source))
endef


## Compile Assembly source.
# @param    $(target)   Normalized main target name.
# @param    $(source)   Source filename (relative).
# @param    $(obj)      Object file name. This shall be (re)created by the compilation.
# @param    $(dep)      Dependcy file. This shall be (re)created by the compilation.
# @param    $(flags)    Flags.
# @param    $(defs)     Definitions. No -D or something.
# @param    $(incs)     Includes. No -I or something.
# @param    $(dirdep)   Directory creation dependency.
# @param    $(deps)     Other dependencies.
# @param    $(outbase)  Output basename (full). Use this for list files and such.
# @param    $(objsuff)  Object suffix.
#
TOOL_GXX32_COMPILE_AS_OUTPUT =
TOOL_GXX32_COMPILE_AS_DEPEND =
TOOL_GXX32_COMPILE_AS_DEPORD =
define TOOL_GXX32_COMPILE_AS_CMDS
	$(QUIET)$(TOOL_GXX32_AS) -c\
		$(flags) $(addprefix -I, $(incs)) $(addprefix -D, $(defs))\
		-Wp,-MD,$(dep) -Wp,-MT,$(obj) -Wp,-MP\
		-o $(obj)\
		$(abspath $(source))
endef


## Link library
# @param    $(target)   Normalized main target name.
# @param    $(out)		Library name.
# @param    $(objs)     Object files to put in the library.
# @param    $(flags)    Flags.
# @param    $(dirdep)   Directory creation dependency.
# @param    $(deps)		Other dependencies.
# @param    $(othersrc) Unhandled sources.
# @param    $(outbase)  Output basename (full). Use this for list files and such.
TOOL_GXX32_LINK_LIBRARY_OUTPUT = $(out).ar-script
TOOL_GXX32_LINK_LIBRARY_DEPEND = $(othersrc)
TOOL_GXX32_LINK_LIBRARY_DEPORD =
ifeq ($(filter append-dash-n,$(KMK_FEATURES)),append-dash-n)
define TOOL_GXX32_LINK_LIBRARY_CMDS
	$(QUIET)$(APPEND) $(out).ar-script 'CREATE $(out)'
	$(QUIET)$(APPEND) -n $(out).ar-script \
		$(foreach o,$(objs), 'ADDMOD $(o)') \
		$(foreach o,$(othersrc), 'ADDLIB $(o)')
	$(QUIET)$(APPEND) $(out).ar-script 'SAVE'
	$(QUIET)$(APPEND) $(out).ar-script 'END'
	$(QUIET)$(TOOL_GXX32_AR) -M < $(out).ar-script
endef
else
define TOOL_GXX32_LINK_LIBRARY_CMDS
	$(QUIET)$(APPEND) $(out).ar-script "CREATE $(out)"
	$(foreach o, $(objs)\
		,$(NL)$(TAB)$(QUIET)$(APPEND) $(out).ar-script "ADDMOD $(o)")
	$(foreach srclib,$(othersrc)\
		,$(NL)$(TAB)$(QUIET)$(APPEND) $(out).ar-script "ADDLIB $(srclib)")
	$(QUIET)$(APPEND) $(out).ar-script "SAVE"
	$(QUIET)$(APPEND) $(out).ar-script "END"
	$(QUIET)$(TOOL_GXX32_AR) -M < $(out).ar-script
endef
endif


## Link program
# @param    $(target)   Normalized main target name.
# @param    $(out)		Program name.
# @param    $(objs)     Object files to link together.
# @param    $(libs)     Libraries to search.
# @param    $(libpath)  Library search paths.
# @param    $(flags)    Flags.
# @param    $(dirdep)   Directory creation dependency.
# @param    $(deps)		Other dependencies.
# @param    $(othersrc) Unhandled sources.
# @param    $(custom_pre)   Custom step invoked before linking.
# @param    $(custom_post)  Custom step invoked after linking.
# @param    $(outbase)  Output basename (full). Use this for list files and such.
TOOL_GXX32_LINK_PROGRAM_OUTPUT = $(outbase).map
TOOL_GXX32_LINK_PROGRAM_DEPEND = $(foreach lib,$(libs),$(if $(findstring $(lib),$(subst /,x,$(lib))),, $(lib)))
TOOL_GXX32_LINK_PROGRAM_DEPORD =
define TOOL_GXX32_LINK_PROGRAM_CMDS
	$(QUIET)$(TOOL_GXX32_LD) $(flags) -o $(out) $(objs)\
		$(foreach p,$(libpath), -L$(p))\
		$(foreach lib,$(libs), $(if $(findstring $(lib),$(subst /,x,$(lib))), -l$(patsubst lib%,%,$(basename $(lib))), $(lib)))\
		$(call TOOL_GXX32_LD_MAP,$(outbase).map)
endef


## Link DLL
# @param    $(target)   Normalized main target name.
# @param    $(out)		Program name.
# @param    $(objs)     Object files to link together.
# @param    $(libs)     Libraries to search.
# @param    $(libpath)  Library search paths.
# @param    $(flags)    Flags.
# @param    $(dirdep)   Directory creation dependency.
# @param    $(deps)		Other dependencies.
# @param    $(othersrc) Unhandled sources.
# @param    $(custom_pre)   Custom step invoked before linking.
# @param    $(custom_post)  Custom step invoked after linking.
# @param    $(outbase)  Output basename (full). Use this for list files and such.
TOOL_GXX32_LINK_DLL_OUTPUT = $(outbase).map
TOOL_GXX32_LINK_DLL_DEPEND = $(foreach lib,$(libs),$(if $(findstring $(lib),$(subst /,x,$(lib))),, $(lib)))
TOOL_GXX32_LINK_DLL_DEPORD =
define TOOL_GXX32_LINK_DLL_CMDS
	$(QUIET)$(TOOL_GXX32_LD) $(TOOL_GXX32_LDFLAGS.dll) $(flags) -o $(out)\
		$(if $(filter-out win32 os2, $(BUILD_TARGET)),$(call TOOL_GXX32_LD_SONAME,$(target),$(out)))\
		$(objs)\
		$(foreach p,$(libpath), -L$(p))\
		$(foreach lib,$(libs), $(if $(findstring $(lib),$(subst /,x,$(lib))), -l$(patsubst lib%,%,$(basename $(lib))), $(lib)))\
		$(call TOOL_GXX32_LD_MAP,$(outbase).map)
endef


## Link system module (windows aka driver, linux aka kernel module)
# @param    $(target)   Normalized main target name.
# @param    $(out)		System module name.
# @param    $(objs)     Object files to link together.
# @param    $(libs)     Libraries to search.
# @param    $(libpath)  Library search paths.
# @param    $(flags)    Flags.
# @param    $(dirdep)   Directory creation dependency.
# @param    $(deps)		Other dependencies.
# @param    $(othersrc) Unhandled sources.
# @param    $(custom_pre)   Custom step invoked before linking.
# @param    $(custom_post)  Custom step invoked after linking.
# @param    $(outbase)  Output basename (full). Use this for list files and such.
TOOL_GXX32_LINK_SYSMOD_OUTPUT = $(outbase).map
TOOL_GXX32_LINK_SYSMOD_DEPEND = $(foreach lib,$(libs),$(if $(findstring $(lib),$(subst /,x,$(lib))),, $(lib)))
TOOL_GXX32_LINK_SYSMOD_DEPORD =
define TOOL_GXX32_LINK_SYSMOD_CMDS
	$(QUIET)$(TOOL_GXX32_LD_SYSMOD) $(TOOL_GXX32_LDFLAGS.sysmod) $(flags) -o $(out) $(objs)\
		$(foreach p,$(libpath), -L$(p))\
		$(foreach lib,$(libs), $(if $(findstring $(lib),$(subst /,x,$(lib))), -l$(patsubst lib%,%,$(basename $(lib))), $(lib)))\
		$(call TOOL_GXX32_LD_SYSMOD_MAP,$(outbase).map)
endef

