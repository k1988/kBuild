# $Id$
## @file
#
# kBuild - Additional header for use when bootstrapping kBuild using Vanilla GNU Make.
#
# Copyright (c) 2004-2006 knut st. osmundsen <bird-srcspam@anduin.net>
#
#
# This file is part of kBuild.
#
# kBuild is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# kBuild is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with kBuild; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#
#

#
# Disable some features to make it work.
#
NO_COMPILE_CMDS_DEPS := 1
NO_LINK_CMDS_DEPS := 1
sinclude $(PATH_KBUILD)/StampOutPredefines.kmk
$(warning kBuild: Using vanilla GNU make isn't safe for anything but kBuild bootstrapping!)

##
# Pushes an item onto a 'stack' variable. 
# @param    $1   The stack variable name
# @param    $2   What to push.
stack-push = $(eval $1 +=$2)

##
# Removes the top element from a 'stack' variable.
# @returns  The popped element
# @param    $1   The stack variable name
stack-pop  = $(call stack-top,$1)$(call stack-popv,$1)

##
# Removes the top element from a 'stack' variable.
# This does *NOT* return the top element, use 
# @param    $1   The stack variable name
# @remark This ain't very fast (that's why it's implemented in functions.c in kmk).
stack-popv = $(eval $1:=$(wordlist 1,$(words $(wordlist 2,9999,$($1))),$($1)))

##
# Retrieves the top element from the 'stack' variable.
# @param    $1   The stack variable name
stack-top  = $(lastword $($1))


#
# Fix some default variables.
#
ifeq ($(MAKEFLAGS),$(MAKEFLAGS:R=x))
# add the -R makeflag to avoid doing this for submakes
MAKEFLAGS := R$(MAKEFLAGS)

define def_undefine_default
ifeq ($(origin $1), default)
$1:=
endif
endef
									
_DEFAULT_VARIABLES := .LIBPATTERNS .VARIABLES AR ARFLAGS AS CC CHECKOUT,v CO COFLAGS COMPILE.C COMPILE.F COMPILE.S COMPILE.c COMPILE.cc COMPILE.cpp COMPILE.def COMPILE.f COMPILE.mod COMPILE.p COMPILE.r COMPILE.s CPP CTANGLE CWEAVE CXX F77 F77FLAGS FC GET LD LEX LEX.l LINK.C LINK.F LINK.S LINK.c LINK.cc LINK.cpp LINK.f LINK.o LINK.p LINK.r LINK.s LINT LINT.c M2C MAKEINFO OUTPUT_OPTION PC PREPROCESS.F PREPROCESS.S PREPROCESS.r RM TANGLE TEX TEXI2DVI WEAVE YACC YACC.y
$(foreach i, $(_DEFAULT_VARIABLES), $(eval $(call def_undefine_default,$(i))))
_DEFAULT_VARIABLES :=
def_undefine_default :=
endif

#
# Zap suffixes.
#
.SUFFIXES:
SUFFIXES :=

#
# Zap implicit rules
#
ifeq ($(MAKEFLAGS),$(MAKEFLAGS:r=x))
MAKEFLAGS := r$(MAKEFLAGS)
# add the -r makeflag to avoid doing this for submakes

%.C:
%.F:
%.S:
%.a:
%.c:
%.c: %.l
%.c: %.w
%.c: %.w %.ch
%.c: %.y
%.cc:
%.ch:
%.cpp:
%.def:
%.dll:
%.dvi:
%.dvi: %.tex
%.dvi: %.texi
%.dvi: %.texinfo
%.dvi: %.txinfo
%.el:
%.elc:
%.exe:
%.f:
%.f: %.F
%.f: %.r
%.h:
%.info:
%.info: %.texi
%.info: %.texinfo
%.info: %.txinfo
%.l:
%.lib:
%.ln:
%.ln: %.c
%.ln: %.l
%.ln: %.y
%.mod:
%.o:
%.o: %.C
%.o: %.F
%.o: %.S
%.o: %.c
%.o: %.cc
%.o: %.cpp
%.o: %.f
%.o: %.mod
%.o: %.p
%.o: %.r
%.o: %.s
%.obj:
%.out:
%.out: %
%.p:
%.p: %.web
%.r:
%.r: %.l
%.s:
%.s: %.S
%.sh:
%.sym:
%.sym: %.def
%.tex:
%.tex: %.w
%.tex: %.w %.ch
%.tex: %.web
%.texi:
%.texinfo:
%.txinfo:
%.w:
%.web:
%.y:
%: %.C
%: %.F
%: %.S
%: %.c
%: %.cc
%: %.cpp
%: %.f
%: %.mod
%: %.o
%: %.p
%: %.r
%: %.s
%: %.sh
%:: %,v
%:: RCS/%
%:: RCS/%,v
%:: SCCS/s.%
%:: s.%
(%): %
endif


