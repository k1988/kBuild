# $Id$
## @file
#
# kBuild Tool Config - Generic GCC.
#
# Copyright (c) 2004 knut st. osmundsen <bird-srcspam@anduin.net>
#
#
# This file is part of kBuild.
#
# kBuild is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# kBuild is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with kBuild; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#
#


TOOL_GCC                := Generic GCC

TOOL_GCC_CC             := gcc$(HOSTSUFF_EXE)
TOOL_GCC_COBJSUFF       := .o
TOOL_GCC_CFLAGS         := -g
TOOL_GCC_CFLAGS.debug   := -O0
TOOL_GCC_CFLAGS.release := -O2
TOOL_GCC_CFLAGS.profile := -pg
TOOL_GCC_CINCS          :=
TOOL_GCC_CDEFS          :=

TOOL_GCC_CC             := gcc$(HOSTSUFF_EXE)
TOOL_GCC_CXXOBJSUFF     := .o

TOOL_GCC_AS             := as$(HOSTSUFF_EXE)
TOOL_GCC_ASOBJSUFF      := .o

TOOL_GCC_AR             := ar$(HOSTSUFF_EXE)
TOOL_GCC_ARFLAGS        := cr
TOOL_GCC_ARLIBSUFF      := .a


## Compile C source.
# @param    $(target)   Normalized main target name.
# @param    $(source)   Source filename (relative).
# @param	$(obj)      Object file name. This shall be (re)created by the compilation.
# @param    $(dep)	    Dependcy file. This shall be (re)created by the compilation.
# @param    $(flags)    Flags.
# @param    $(defs)     Definitions. No -D or something.
# @param    $(incs)     Includes. No -I or something.
# @param	$(dirdep)   Directory creation dependency.
#
# @param    $(outbase)  Output basename (full). Use this for list files and such.
# @param	$(objsuff)  Object suffix.
define TOOL_GCC_COMPILE_C
#$ (warning dbg: GCC: target=$(target) source=$(source) obj=$(obj) dep=$(dep) flags=$(flags) defs=$(defs) incs=$(incs) dirdep=$(dirdep) outbase=$(outbase) objsuff=$(objsuff))
$(obj): $(dirdep) $(PATH_CURRENT)/$(source)
	$(call MSG_L2,Compiling $$@ using GCC)
	$(TOOL_GCC_CC) -c\
		$(flags) $(addprefix -I, $(incs)) $(addprefix -D, $(defs))\
		-Wp,-MT,$(dep) -Wp,-MD,$$@\
		-o $$@\
        $(PATH_CURRENT)/$(source)		
		
endef


## Link library
# @param    $(target)   Normalized main target name.
# @param    $(lib)		Library name.
# @param    $(objs)     Object files to put in the library.
# @param    $(flags)    Flags.
# @param	$(dirdep)   Directory creation dependency.
# @param	$(deps)		Other dependencies.
#
# @param    $(outbase)  Output basename (full). Use this for list files and such.
define TOOL_GCC_LINK_LIBRARY
#$ (warning dbg: GCC: target=$(target) lib=$(lib) objs=$(objs) deps=$(deps) flags=$(flags) dirdep=$(dirdep) outbase=$(outbase))
$(lib): $(dirdep) $(objs) $(deps)
	$(call MSG_L1,Creating Library $$@)
	$(RM) -f $$@
	$(TOOL_GCC_AR) $(flags) $$@ $(objs)
	
endef

