# $Id$
## @file
#
# kBuild Tool Config - Visual C++ 8.0 (aka Visual .NET 2005, or MSC v14)
#
# Copyright (c) 2004-2006 knut st. osmundsen <bird-srcspam@anduin.net>
#
#
# This file is part of kBuild.
#
# kBuild is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# kBuild is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with kBuild; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#
#


TOOL_VCC80X86                    := Visual C++ 8.0 x86
PATH_TOOL_VCC80X86               ?= $(PATH_DEV)/x86.win32/vcc/v8
PATH_TOOL_VCC80X86_LIB           ?= $(PATH_TOOL_VCC80X86)/lib
PATH_TOOL_VCC80X86_BIN           ?= $(PATH_TOOL_VCC80X86)/bin

TOOL_VCC80X86_CC                 := $(EXEC_X86_WIN32) $(PATH_TOOL_VCC80X86_BIN)/cl.exe
TOOL_VCC80X86_COBJSUFF           := .obj
TOOL_VCC80X86_CFLAGS             := -TC -c -nologo
TOOL_VCC80X86_CFLAGS.debug       := -Zi
TOOL_VCC80X86_CFLAGS.release     := -O2
TOOL_VCC80X86_CFLAGS.profile     := -O2
TOOL_VCC80X86_CINCS              := $(PATH_TOOL_VCC80X86)/include
TOOL_VCC80X86_CDEFS              :=

TOOL_VCC80X86_CXX                := $(EXEC_X86_WIN32) $(PATH_TOOL_VCC80X86_BIN)/cl.exe
TOOL_VCC80X86_CXXOBJSUFF         := .obj
TOOL_VCC80X86_CXXFLAGS           := -TP -c -nologo
TOOL_VCC80X86_CXXFLAGS.debug     := -Zi
TOOL_VCC80X86_CXXFLAGS.release   := -O2
TOOL_VCC80X86_CXXFLAGS.profile   := -O2
TOOL_VCC80X86_CXXINCS            := $(PATH_TOOL_VCC80X86)/include
TOOL_VCC80X86_CXXDEFS            :=

TOOL_VCC80X86_AS                 := $(EXEC_X86_WIN32) $(PATH_TOOL_VCC80X86_BIN)/ml.exe
TOOL_VCC80X86_ASOBJSUFF          := .obj

TOOL_VCC80X86_RC                 := $(EXEC_X86_WIN32) $(PATH_TOOL_VCC80X86_BIN)/rc.exe
TOOL_VCC80X86_RCOBJSUFF          := .res
TOOL_VCC80X86_RCINCS             := $(PATH_TOOL_VCC80X86)/include

TOOL_VCC80X86_AR                 := $(EXEC_X86_WIN32) $(PATH_TOOL_VCC80X86_BIN)/lib.exe
TOOL_VCC80X86_ARFLAGS            := -nologo
TOOL_VCC80X86_ARLIBSUFF          := .lib

TOOL_VCC80X86_LD                 := $(EXEC_X86_WIN32) $(PATH_TOOL_VCC80X86_BIN)/link.exe
TOOL_VCC80X86_LDFLAGS            := -nologo -machine:x86
TOOL_VCC80X86_LDFLAGS.debug      := -debug
TOOL_VCC80X86_LDFLAGS.release    :=

TOOL_VCC80X86_MT                 := $(EXEC_X86_WIN32) $(PATH_TOOL_VCC80X86_BIN)/mt.exe

## Constructs the correct .pdb name (the name is lowercased).
# @param    $(1)        Base name, no extention.
# @param    $(2)        The extension.
ifeq ($(filter tolower,$(KMK_FEATURES)),tolower)
TOOL_VCC80X86_PDB                = $(dir $(1))$(tolower $(notdir $(1))).$(2)
else # this fallback is incorrect and won't work on a case sensitive FS.
TOOL_VCC80X86_PDB                = $(1).$(2)
endif


#ifeq ($(BUILD_PLATFORM),win32)
VCC80X86_NEW_DEPS = 1
#endif



## Compile C source.
# @param    $(target)   Normalized main target name.
# @param    $(source)   Source filename (relative).
# @param    $(obj)      Object file name. This shall be (re)created by the compilation.
# @param    $(dep)      Dependcy file. This shall be (re)created by the compilation.
# @param    $(flags)    Flags.
# @param    $(defs)     Definitions. No -D or something.
# @param    $(incs)     Includes. No -I or something.
# @param    $(dirdep)   Directory creation dependency.
# @param    $(deps)     Other dependencies.
#
# @param    $(outbase)  Output basename (full). Use this for list files and such.
# @param    $(objsuff)  Object suffix.
TOOL_VCC80X86_COMPILE_C_OUTPUT	= $(call TOOL_VCC80X86_PDB, $(outbase)-obj,pdb) $(call TOOL_VCC80X86_PDB, $(outbase)-obj,idb)
TOOL_VCC80X86_COMPILE_C_DEPEND	=
TOOL_VCC80X86_COMPILE_C_DEPORD =
ifdef VCC80X86_NEW_DEPS
define TOOL_VCC80X86_COMPILE_C_CMDS
	$(TOOL_VCC80X86_CC) -c\
		$(flags) $(addprefix -I, $(incs)) $(addprefix -D, $(defs))\
		-Fd$(outbase)-obj.pdb \
		-FD\
		-Fo$(obj)\
		$(subst /,\\,$(call ABSPATH,$(source)))
	$(DEP_IDB) -f -s -o $(dep) -t $(obj) $(call TOOL_VCC80X86_PDB,$(outbase)-obj,idb)
endef
else
define TOOL_VCC80X86_COMPILE_C_CMDS
	$(TOOL_VCC80X86_CC) -c\
		$(flags) $(addprefix -I, $(incs)) $(addprefix -D, $(defs))\
		-Fd$(outbase)-obj.pdb \
		-Fo$(obj)\
		$(subst /,\\,$(call ABSPATH,$(source)))
	$(TOOL_VCC80X86_CC) -E\
		$(flags) $(addprefix -I, $(incs)) $(addprefix -D, $(defs))\
		$(subst /,\\,$(call ABSPATH,$(source)))\
		| $(DEP_PRE) -f -s -o $(dep) -t $(obj) -
endef
endif


## Compile C++ source.
# @param    $(target)   Normalized main target name.
# @param    $(source)   Source filename (relative).
# @param    $(obj)      Object file name. This shall be (re)created by the compilation.
# @param    $(dep)      Dependcy file. This shall be (re)created by the compilation.
# @param    $(flags)    Flags.
# @param    $(defs)     Definitions. No -D or something.
# @param    $(incs)     Includes. No -I or something.
# @param    $(dirdep)   Directory creation dependency.
# @param    $(deps)     Other dependencies.
#
# @param    $(outbase)  Output basename (full). Use this for list files and such.
# @param    $(objsuff)  Object suffix.
TOOL_VCC80X86_COMPILE_CXX_OUTPUT = $(call TOOL_VCC80X86_PDB, $(outbase)-obj,pdb) $(call TOOL_VCC80X86_PDB, $(outbase)-obj,idb)
TOOL_VCC80X86_COMPILE_CXX_DEPEND =
TOOL_VCC80X86_COMPILE_CXX_DEPORD =
ifdef VCC80X86_NEW_DEPS
define TOOL_VCC80X86_COMPILE_CXX_CMDS
	$(TOOL_VCC80X86_CXX) -c\
		$(flags) $(addprefix -I, $(incs)) $(addprefix -D, $(defs))\
		-Fd$(outbase)-obj.pdb \
		-FD\
		-Fo$(obj)\
		$(subst /,\\,$(call ABSPATH,$(source)))
	$(DEP_IDB) -f -s -o $(dep) -t $(obj) $(call TOOL_VCC80X86_PDB,$(outbase)-obj,idb)
endef
else
define TOOL_VCC80X86_COMPILE_CXX_CMDS
	$(TOOL_VCC80X86_CXX) -c\
		$(flags) $(addprefix -I, $(incs)) $(addprefix -D, $(defs))\
		-Fd$(outbase)-obj.pdb \
		-Fo$(obj)\
		$(subst /,\\,$(call ABSPATH,$(source)))
	$(TOOL_VCC80X86_CXX) -E\
		$(flags) $(addprefix -I, $(incs)) $(addprefix -D, $(defs))\
		$(subst /,\\,$(call ABSPATH,$(source)))\
		| $(DEP_PRE) -f -s -o $(dep) -t $(obj) -
endef
endif


## Compile resource source.
# @param    $(target)   Normalized main target name.
# @param    $(source)   Source filename (relative).
# @param    $(obj)      Object file name. This shall be (re)created by the compilation.
# @param    $(dep)      Dependcy file. This shall be (re)created by the compilation.
# @param    $(flags)    Flags.
# @param    $(defs)     Definitions. No -D or something.
# @param    $(incs)     Includes. No -I or something.
# @param    $(dirdep)   Directory creation dependency.
# @param    $(deps)     Other dependencies.
#
# @param    $(outbase)  Output basename (full). Use this for list files and such.
# @param    $(objsuff)  Object suffix.
TOOL_VCC80X86_COMPILE_RC_OUTPUT =
TOOL_VCC80X86_COMPILE_RC_DEPEND =
TOOL_VCC80X86_COMPILE_RC_DEPORD =
define TOOL_VCC80X86_COMPILE_RC_CMDS
	$(TOOL_VCC80X86_RC) \
		$(flags) $(addprefix /i, $(subst /,\\,$(incs))) $(addprefix /d, $(defs))\
		/fo$(obj)\
		$(subst /,\\,$(call ABSPATH,$(source)))
endef


## Link library
# @param    $(target)   Normalized main target name.
# @param    $(out)      Library name.
# @param    $(objs)     Object files to put in the library.
# @param    $(flags)    Flags.
# @param    $(dirdep)   Directory creation dependency.
# @param    $(deps)     Other dependencies.
# @param    $(othersrc) Unhandled sources.
# @param    $(outbase)  Output basename (full). Use this for list files and such.
#
TOOL_VCC80X86_LINK_LIBRARY_OUTPUT = $(outbase).lst $(outbase).exp $(outbase).pdb
TOOL_VCC80X86_LINK_LIBRARY_DEPEND = $(othersrc)
TOOL_VCC80X86_LINK_LIBRARY_DEPORD =
define TOOL_VCC80X86_LINK_LIBRARY_CMDS
	$(TOOL_VCC80X86_AR) $(flags) /OUT:$(out) $(subst /,\\,$(objs) $(filter %.a %.lib,$(othersrc))) \
		$(foreach def,$(filter %.def,$(othersrc)), /DEF:$(def))
endef


## Link program
# @param    $(target)       Normalized main target name.
# @param    $(out)          Program name.
# @param    $(objs)         Object files to link together.
# @param    $(libs)         Libraries to search.
# @param    $(libpath)      Library search paths.
# @param    $(flags)        Flags.
# @param    $(dirdep)       Directory creation dependency.
# @param    $(deps)         Other dependencies.
# @param    $(othersrc)     Unhandled sources.
# @param    $(custom_pre)   Custom step invoked before linking.
# @param    $(custom_post)  Custom step invoked after linking.
# @param    $(outbase)      Output basename (full). Use this for list files and such.
#
TOOL_VCC80X86_LINK_PROGRAM_OUTPUT = $(outbase).map $(outbase).lib $(outbase).exp $(outbase).pdb $(outbase).ilk $(out).manifest
TOOL_VCC80X86_LINK_PROGRAM_DEPEND = $(foreach lib,$(libs),$(if $(findstring $(lib),$(subst /,x,$(lib))),, $(lib))) $(othersrc)
TOOL_VCC80X86_LINK_PROGRAM_DEPORD =
define TOOL_VCC80X86_LINK_PROGRAM_CMDS
	$(TOOL_VCC80X86_LD) $(flags) \
		/OUT:$(out) \
		/MAPINFO:EXPORTS /INCREMENTAL:NO \
		/MAP:$(outbase).map \
		$(foreach def,$(filter %.def,$(othersrc)), /DEF:$(def)) \
		$(subst /,\\,$(filter %.exp %.res,$(othersrc))) \
		$(foreach p,$(libpath), /LIBPATH:$(p)) \
		$(subst /,\\,$(objs)) \
		$(subst /,\\,$(libs))
	if test -f $(out).manifest; then \
		$(TOOL_VCC80X86_MT) -manifest $(subst /,\\,$(out)).manifest -outputresource:$(subst /,\\,$(out)); \
	fi
endef


## Link DLL.
# @param    $(target)   Normalized main target name.
# @param    $(out)      DLL name.
# @param    $(objs)     Object files to link together.
# @param    $(libs)     Libraries to search.
# @param    $(libpath)  Library search paths.
# @param    $(flags)    Flags.
# @param    $(dirdep)   Directory creation dependency.
# @param    $(deps)     Other dependencies.
# @param    $(othersrc)     Unhandled sources.
# @param    $(custom_pre)   Custom step invoked before linking.
# @param    $(custom_post)  Custom step invoked after linking.
#
# @param    $(outbase)  Output basename (full). Use this for list files and such.
TOOL_VCC80X86_LINK_DLL_OUTPUT = $(outbase).map $(outbase).lib $(outbase).exp $(outbase).pdb $(outbase).ilk $(out).manifest
TOOL_VCC80X86_LINK_DLL_DEPEND = $(objs) $(foreach lib,$(libs),$(if $(findstring $(lib),$(subst /,x,$(lib))),, $(lib))) $(othersrc)
TOOL_VCC80X86_LINK_DLL_DEPORD = $(call DIRDEP,$(PATH_LIB))
define TOOL_VCC80X86_LINK_DLL_CMDS
	$(TOOL_VCC80X86_LD) $(flags) \
		/OUT:$(out) \
		/IMPLIB:$(outbase).lib \
		/MAPINFO:EXPORTS /INCREMENTAL:NO \
		/MAP:$(outbase).map \
		/DLL \
		$(foreach def,$(filter %.def,$(othersrc)), /DEF:$(def)) \
		$(subst /,\\,$(filter %.exp %.res,$(othersrc))) \
		$(foreach p,$(libpath), /LIBPATH:$(p)) \
		$(subst /,\\,$(objs)) \
		$(subst /,\\,$(libs))
	if test -f $(out).manifest; then \
		$(TOOL_VCC80X86_MT) -manifest $(subst /,\\,$(out)).manifest "-outputresource:$(subst /,\\,$(out));#2"; \
	fi
ifeq ($(filter %.exp .def,$(othersrc)),)
	if test -f $(outbase).exp; then $(CP_EXT) $(outbase).exp $(PATH_LIB)/; fi
	if test -f $(outbase).lib; then $(CP_EXT) $(outbase).lib $(PATH_LIB)/; fi
endif
$(eval _DIRS += $(PATH_LIB))
endef


## Link system module (windows aka driver, linux aka kernel module)
# @param    $(target)       Normalized main target name.
# @param    $(out)          System module name.
# @param    $(objs)         Object files to link together.
# @param    $(libs)         Libraries to search.
# @param    $(libpath)      Library search paths.
# @param    $(flags)        Flags.
# @param    $(dirdep)       Directory creation dependency.
# @param    $(deps)         Other dependencies.
# @param    $(othersrc)     Unhandled sources.
# @param    $(custom_pre)   Custom step invoked before linking.
# @param    $(custom_post)  Custom step invoked after linking.
#
# @param    $(outbase)  Output basename (full). Use this for list files and such.
TOOL_VCC80X86_LINK_SYSMOD_OUTPUT = $(outbase).map $(outbase).lib $(outbase).exp $(outbase).pdb $(outbase).ilk $(out).manifest
TOOL_VCC80X86_LINK_SYSMOD_DEPEND = $(foreach lib,$(libs),$(if $(findstring $(lib),$(subst /,x,$(lib))),, $(lib))) $(othersrc)
TOOL_VCC80X86_LINK_SYSMOD_DEPORD =
define TOOL_VCC80X86_LINK_SYSMOD_CMDS
	$(TOOL_VCC80X86_LD) $(flags) \
		/OUT:$(out) \
		/MAPINFO:EXPORTS /INCREMENTAL:NO \
		/MAP:$(outbase).map \
		$(foreach def,$(filter %.def,$(othersrc)), /DEF:$(def)) \
		$(subst /,\\,$(filter %.exp %.res,$(othersrc))) \
		$(foreach p,$(libpath), /LIBPATH:$(p)) \
		$(subst /,\\,$(objs)) \
		$(subst /,\\,$(libs))
	if test -f $(out).manifest; then \
		$(TOOL_VCC80X86_MT) -manifest $(subst /,\\,$(out)).manifest "-outputresource:$(subst /,\\,$(out));#2"; \
	fi
endef

