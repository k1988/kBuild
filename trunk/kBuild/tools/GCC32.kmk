# $Id: GCC3.kmk 380 2005-12-18 13:52:47Z bird $
## @file
#
# kBuild Tool Config - 32-bit GCC, elf.
#
# Copyright (c) 2004-2006 knut st. osmundsen <bird-srcspam@anduin.net>
#
#
# This file is part of kBuild.
#
# kBuild is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# kBuild is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with kBuild; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#
#

TOOL_GCC32                   := Generic GCC v3 32-bit

TOOL_GCC32_CC                 := gcc32$(HOSTSUFF_EXE)
TOOL_GCC32_COBJSUFF           := .o
TOOL_GCC32_CFLAGS             := -g
TOOL_GCC32_CFLAGS.debug       := -O0
TOOL_GCC32_CFLAGS.release     := -O2
TOOL_GCC32_CFLAGS.profile     := -O2 #-pg
TOOL_GCC32_CINCS              :=
TOOL_GCC32_CDEFS              :=

TOOL_GCC32_CXX                := g++32$(HOSTSUFF_EXE)
TOOL_GCC32_CXXOBJSUFF         := .o
TOOL_GCC32_CXXOBJSUFF         := .o
TOOL_GCC32_CXXFLAGS           := -g
TOOL_GCC32_CXXFLAGS.debug     := -O0
TOOL_GCC32_CXXFLAGS.release   := -O2
TOOL_GCC32_CXXFLAGS.profile   := -O2 #-pg
TOOL_GCC32_CXXINCS            :=
TOOL_GCC32_CXXDEFS            :=

TOOL_GCC32_AS                 := as$(HOSTSUFF_EXE)
TOOL_GCC32_ASFLAGS            := -m32
TOOL_GCC32_ASOBJSUFF          := .o

TOOL_GCC32_AR                 := ar$(HOSTSUFF_EXE)
TOOL_GCC32_ARFLAGS            := cr
TOOL_GCC32_ARLIBSUFF          := .a

TOOL_GCC32_LD                 := g++32$(HOSTSUFF_EXE)
TOOL_GCC32_LD_SYSMOD          := ld$(HOSTSUFF_EXE)
TOOL_GCC32_LDFLAGS           := -m elf_i386
TOOL_GCC32_LDFLAGS.debug      := -g
TOOL_GCC32_LDFLAGS.release    := -s
ifndef TOOL_GCC32_LDFLAGS.$(BUILD_TARGET)
TOOL_GCC32_LDFLAGS.dll        := -shared
else
TOOL_GCC32_LDFLAGS.dll        := $(TOOL_GCC32_LDFLAGS.$(BUILD_TARGET))
endif
TOOL_GCC32_LDFLAGS.sysmod     := -r
TOOL_GCC32_LD_SONAME           = -Wl,-soname=$(firstword $($(1)_SONAME.$(BUILD_TARGET).$(BUILD_TYPE)) $($(1)_SONAME.$(BUILD_TARGET)) $($(1)_SONAME.$(BUILD_TYPE)) $($(1)_SONAME) $(notdir $(2)))
ifeq ($(BUILD_TARGET),os2)
TOOL_GCC32_LD_MAP              = -Zmap=$(1)
else
TOOL_GCC32_LD_MAP              = -Wl,-Map -Wl,$(1) -Wl,--cref
endif
ifeq ($(BUILD_TARGET),os2)
TOOL_GCC32_LD_SYSMOD_MAP       = -Zmap=$(1)
else
TOOL_GCC32_LD_SYSMOD_MAP       = -Map $(1) --cref
endif
ifdef SLKRUNS
TOOL_GCC32_CC  += -fmessage-length=0
TOOL_GCC32_CXX += -fmessage-length=0
endif


## Compile C source.
# @param    $(target)   Normalized main target name.
# @param    $(source)   Source filename (relative).
# @param    $(obj)      Object file name. This shall be (re)created by the compilation.
# @param    $(dep)	    Dependcy file. This shall be (re)created by the compilation.
# @param    $(flags)    Flags.
# @param    $(defs)     Definitions. No -D or something.
# @param    $(incs)     Includes. No -I or something.
# @param    $(dirdep)   Directory creation dependency.
# @param    $(deps)		Other dependencies.
#
# @param    $(outbase)  Output basename (full). Use this for list files and such.
# @param    $(objsuff)  Object suffix.
TOOL_GCC32_COMPILE_C_OUTPUT =
TOOL_GCC32_COMPILE_C_DEPEND =
TOOL_GCC32_COMPILE_C_DEPORD =
define TOOL_GCC32_COMPILE_C_CMDS
	$(TOOL_GCC32_CC) -c\
		$(flags) $(addprefix -I, $(incs)) $(addprefix -D, $(defs))\
		-Wp,-MD,$(dep) -Wp,-MT,$(obj) -Wp,-MP\
		-o $(obj)\
		$(call ABSPATH,$(source))
endef


## Compile C++ source.
# @param    $(target)   Normalized main target name.
# @param    $(source)   Source filename (relative).
# @param    $(obj)      Object file name. This shall be (re)created by the compilation.
# @param    $(dep)	    Dependcy file. This shall be (re)created by the compilation.
# @param    $(flags)    Flags.
# @param    $(defs)     Definitions. No -D or something.
# @param    $(incs)     Includes. No -I or something.
# @param    $(dirdep)   Directory creation dependency.
# @param    $(deps)		Other dependencies.
# @param    $(outbase)  Output basename (full). Use this for list files and such.
# @param    $(objsuff)  Object suffix.
TOOL_GCC32_COMPILE_CXX_OUTPUT =
TOOL_GCC32_COMPILE_CXX_DEPEND =
TOOL_GCC32_COMPILE_CXX_DEPORD =
define TOOL_GCC32_COMPILE_CXX_CMDS
	$(TOOL_GCC32_CXX) -c\
		$(flags) $(addprefix -I, $(incs)) $(addprefix -D, $(defs))\
		-Wp,-MD,$(dep) -Wp,-MT,$(obj) -Wp,-MP\
		-o $(obj)\
		$(call ABSPATH,$(source))
endef


## Link library
# @param    $(target)   Normalized main target name.
# @param    $(out)		Library name.
# @param    $(objs)     Object files to put in the library.
# @param    $(flags)    Flags.
# @param    $(dirdep)   Directory creation dependency.
# @param    $(deps)		Other dependencies.
# @param    $(othersrc) Unhandled sources.
# @param    $(outbase)  Output basename (full). Use this for list files and such.
TOOL_GCC32_LINK_LIBRARY_OUTPUT = $(out).ar-script
TOOL_GCC32_LINK_LIBRARY_DEPEND = $(filter %.a %.lib,$(othersrc))
TOOL_GCC32_LINK_LIBRARY_DEPORD =
define TOOL_GCC32_LINK_LIBRARY_CMDS
	$(APPEND) $(out).ar-script "CREATE $(out)"
	$(foreach o, $(objs)\
		,$(NL)$(TAB)$(APPEND) $(out).ar-script "ADDMOD $(o)")
	$(foreach srclib, $(filter %.a %.lib,$(othersrc))\
		,$(NL)$(TAB)$(APPEND) $(out).ar-script "ADDLIB $(srclib)")
	$(APPEND) $(out).ar-script "SAVE"
	$(APPEND) $(out).ar-script "END"
	$(TOOL_GCC32_AR) -M < $(out).ar-script
endef


## Link program
# @param    $(target)   Normalized main target name.
# @param    $(out)		Program name.
# @param    $(objs)     Object files to link together.
# @param    $(libs)     Libraries to search.
# @param    $(libpath)  Library search paths.
# @param    $(flags)    Flags.
# @param    $(dirdep)   Directory creation dependency.
# @param    $(deps)		Other dependencies.
# @param    $(othersrc) Unhandled sources.
# @param    $(custom_pre)   Custom step invoked before linking.
# @param    $(custom_post)  Custom step invoked after linking.
# @param    $(outbase)  Output basename (full). Use this for list files and such.
TOOL_GCC32_LINK_PROGRAM_OUTPUT = $(outbase).map
TOOL_GCC32_LINK_PROGRAM_DEPEND = $(foreach lib,$(libs),$(if $(findstring $(lib),$(subst /,x,$(lib))),, $(lib)))
TOOL_GCC32_LINK_PROGRAM_DEPORD = 
define TOOL_GCC32_LINK_PROGRAM_CMDS
	$(TOOL_GCC32_LD) $(flags) -o $(out) $(objs)\
		$(foreach p,$(libpath), -L$(p))\
		$(foreach lib,$(libs), $(if $(findstring $(lib),$(subst /,x,$(lib))), -l$(patsubst lib%,%,$(basename $(lib))), $(lib)))\
		$(call TOOL_GCC32_LD_MAP,$(outbase).map)
endef


## Link DLL
# @param    $(target)   Normalized main target name.
# @param    $(out)		Program name.
# @param    $(objs)     Object files to link together.
# @param    $(libs)     Libraries to search.
# @param    $(libpath)  Library search paths.
# @param    $(flags)    Flags.
# @param    $(dirdep)   Directory creation dependency.
# @param    $(deps)		Other dependencies.
# @param    $(othersrc) Unhandled sources.
# @param    $(custom_pre)   Custom step invoked before linking.
# @param    $(custom_post)  Custom step invoked after linking.
# @param    $(outbase)  Output basename (full). Use this for list files and such.
TOOL_GCC32_LINK_DLL_OUTPUT = $(outbase).map
TOOL_GCC32_LINK_DLL_DEPEND = $(foreach lib,$(libs),$(if $(findstring $(lib),$(subst /,x,$(lib))),, $(lib)))
TOOL_GCC32_LINK_DLL_DEPORD =
define TOOL_GCC32_LINK_DLL_CMDS
	$(TOOL_GCC32_LD) $(TOOL_GCC32_LDFLAGS.dll) $(flags) -o $(out)\
		$(if $(filter-out win32 os2, $(BUILD_TARGET)),$(call TOOL_GCC32_LD_SONAME,$(target),$(out)))\
		$(objs)\
		$(foreach p,$(libpath), -L$(p))\
		$(foreach lib,$(libs), $(if $(findstring $(lib),$(subst /,x,$(lib))), -l$(patsubst lib%,%,$(basename $(lib))), $(lib)))\
		$(call TOOL_GCC32_LD_MAP,$(outbase).map)
endef


## Link system module (windows aka driver, linux aka kernel module)
# @param    $(target)   Normalized main target name.
# @param    $(out)		System module name.
# @param    $(objs)     Object files to link together.
# @param    $(libs)     Libraries to search.
# @param    $(libpath)  Library search paths.
# @param    $(flags)    Flags.
# @param    $(dirdep)   Directory creation dependency.
# @param    $(deps)		Other dependencies.
# @param    $(othersrc) Unhandled sources.
# @param    $(custom_pre)   Custom step invoked before linking.
# @param    $(custom_post)  Custom step invoked after linking.
# @param    $(outbase)  Output basename (full). Use this for list files and such.
TOOL_GCC32_LINK_SYSMOD_OUTPUT = $(outbase).map
TOOL_GCC32_LINK_SYSMOD_DEPEND = $(foreach lib,$(libs),$(if $(findstring $(lib),$(subst /,x,$(lib))),, $(lib)))
TOOL_GCC32_LINK_SYSMOD_DEPORD =
define TOOL_GCC32_LINK_SYSMOD_CMDS
	$(TOOL_GCC32_LD_SYSMOD) $(TOOL_GCC32_LDFLAGS.sysmod) $(flags) -o $(out) $(objs)\
		$(foreach p,$(libpath), -L$(p))\
		$(foreach lib,$(libs), $(if $(findstring $(lib),$(subst /,x,$(lib))), -l$(patsubst lib%,%,$(basename $(lib))), $(lib)))\
		$(call TOOL_GCC32_LD_SYSMOD_MAP,$(outbase).map)
endef

