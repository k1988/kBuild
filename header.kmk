# $Id$
## @file
#
# kBuild - File included at top of makefile.
#
# Copyright (c) 2004 knut st. osmundsen <bird-srcspam@anduin.net>
#
#
# This file is part of kBuild.
#
# kBuild is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# kBuild is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with kBuild; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#
#

ifndef __header_kmk__
# start-of-file-content

#
# default rule
#
all: all_recursive

#
# Try avoid inference rules.
#
.SUFFIXES:
SUFFIXES :=


#
# Assert build type.
#
ifndef BUILD_TYPE
ifndef BUILD_MODE
$(error kBuild: You must define BUILD_TYPE!)
endif
BUILD_TYPE          := $(BUILD_MODE)
endif
ifeq ($(BUILD_TYPE),DEBUG)
BUILD_TYPE          := debug
endif
ifeq ($(BUILD_TYPE),RELEASE)
BUILD_TYPE          := release
endif
ifeq ($(BUILD_TYPE),PROFILE)
BUILD_TYPE          := profile
endif


#
# Assert build platform.
#
_BUILD_PLATFORM_OK  := 0
# OS/2
ifeq ($(BUILD_PLATFORM),OS2)
BUILD_PLATFORM      := os2
endif
ifeq ($(BUILD_PLATFORM),os2)
_BUILD_PLATFORM_OK  := 1
endif

# Linux
ifeq ($(BUILD_PLATFORM),LINUX)
BUILD_PLATFORM      := linux
endif
ifeq ($(BUILD_PLATFORM),linux)
_BUILD_PLATFORM_OK  := 1
endif

# Win32
ifeq ($(BUILD_PLATFORM),WIN32)
BUILD_PLATFORM      := win32
endif
ifeq ($(BUILD_PLATFORM),WIN32)
_BUILD_PLATFORM_OK  := 1
endif

ifeq ($(_BUILD_PLATFORM_OK),0)
$(error kBuild: BUILD_PLATFORM value '$(BUILD_PLATFORM)' was not recongized!)
endif


#
# Assert target platform.
#
ifndef BUILD_TARGET
# not defined, set to the same as build platform
BUILD_TARGET        := $(BUILD_PLATFORM)
else
_BUILD_TARGET_OK    := 0
# OS/2
ifeq ($(BUILD_TARGET),OS2)
BUILD_TARGET        := os2
endif
ifeq ($(BUILD_TARGET),os2)
_BUILD_TARGET_OK    := 1
endif

# Linux
ifeq ($(BUILD_TARGET),LINUX)
BUILD_TARGET        := linux
endif
ifeq ($(BUILD_TARGET),linux)
_BUILD_TARGET_OK    := 1
endif

# Win32
ifeq ($(BUILD_TARGET),WIN32)
BUILD_TARGET        := win32
endif
ifeq ($(BUILD_TARGET),WIN32)
_BUILD_TARGET_OK    := 1
endif

ifeq ($(_BUILD_TARGET_OK),0)
$(error kBuild: BUILD_TARGET value '$(BUILD_TARGET)' was not recongized!)
endif
endif


#
# Common definitions.
#
PATH_CURRENT        := $(CURDIR)
# Get the real root path.
PATH_ROOT           := $(CURDIR)
ifneq ($(DEPTH),.)
$(foreach d,$(subst /, ,$(DEPTH)), $(eval PATH_ROOT := $(patsubst %/,%,$(dir $(PATH_ROOT)))) )
endif
# Subdirectory relative to the root.
CURSUBDIR           := $(patsubst $(PATH_ROOT)/%,%,$(CURDIR))
# Output directories.
PATH_OUT            := $(PATH_ROOT)/out/$(BUILD_TARGET)/$(BUILD_TYPE)
PATH_OBJ            := $(PATH_OUT)/obj
PATH_BIN            := $(PATH_OUT)/bin
PATH_LIB            := $(PATH_OUT)/lib
PATH_DOC            := $(PATH_ROOT)/out/doc
PATH_TARGET         := $(PATH_OBJ)/$(CURSUBDIR)

# Usually kBuild is external to the source tree.
ifndef PATH_KBUILD
PATH_KBUILD         := $(PATH_ROOT)/kBuild
endif
# kBuild tools
PATH_TOOLS_W32      := $(PATH_KBUILD)/bin/x86.win32
PATH_TOOLS_LNX      := $(PATH_KBUILD)/bin/x86.linux
PATH_TOOLS_OS2      := $(PATH_KBUILD)/bin/x86.os2
# kBuild files which might be of interest.
FILE_KBUILD_HEADER  := $(PATH_KBUILD)/header.kmk
FILE_KBUILD_CONFIG  := $(PATH_KBUILD)/config.kmk
FILE_KBUILD_FOOTER  := $(PATH_KBUILD)/footer.kmk

SUFF_DEP            := .dep


#
# Get rid of the GNU Make default stuff
#
include $(PATH_KBUILD)/StampOutPredefines.kmk


#
# Build platform setup.
#
# OS/2
ifeq ($(BUILD_PLATFORM),os2)
PATH_TOOLS          := $(PATH_TOOLS_OS2)
EXEC_X86_WIN32      := $(PATH_TOOLS)/bin/innopec.exe
HOSTSUFF_EXE        := .exe
endif

# Linux
ifeq ($(BUILD_PLATFORM),linux)
PATH_TOOLS          := $(PATH_TOOLS_LNX)
EXEC_X86_WIN32      := wine
HOSTSUFF_EXE        :=
endif

# Win32
ifeq ($(BUILD_PLATFORM),win32)
PATH_TOOLS          := $(PATH_TOOLS_W32)
EXEC_X86_WIN32      :=
HOSTSUFF_EXE        := .exe
endif


#
# Standard kBuild tools.
#
DEP                 := $(PATH_TOOLS)/kDep$(HOSTSUFF_EXE)
# Standard Unix shell utils.
MKDIR               := $(PATH_TOOLS)/mkdir$(HOSTSUFF_EXE)
RM                  := $(PATH_TOOLS)/rm$(HOSTSUFF_EXE)
CP                  := $(PATH_TOOLS)/mv$(HOSTSUFF_EXE)
MV                  := $(PATH_TOOLS)/cp$(HOSTSUFF_EXE)
SED                 := $(PATH_TOOLS)/sed$(HOSTSUFF_EXE)
CAT                 := $(PATH_TOOLS)/cat$(HOSTSUFF_EXE)
# Bourn shell clone.
MAKESHELL           := $(PATH_TOOLS)/ash$(HOSTSUFF_EXE)
SHELL               := $(MAKESHELL)
export SHELL MAKESHELL


#
# This is how we find the closest config.kmk.
# It's a little hacky but I think it works fine.
#
_CFGDIR     := .
_CFGFILES   :=
define def_include_config
_CFGDIR     := $(_CFGDIR)/$(1)
_CFGFILES   += $(wildcard $(_CFGDIR)/config.kmk $(_CFGDIR)/config.kMk)
endef
# walk down the _RELATIVE_ path specified by DEPTH.
$(foreach d,$(subst /, ,$(DEPTH)), $(eval $(call def_include_config,$(d))) )
# add the default config file.
_CFGFILE    := $(firstword $(_CFGFILES) $(FILE_KBUILD_CONFIG))
_CFGFILES   :=
_CFGDIR     :=

# Include the config.kmk we found file (or the default one).
include $(_CFGFILE)


# end-of-file-content
__header_kmk__ := 1
endif # __header_kmk__
